{"version":3,"sources":["app/auth.cljs"],"mappings":"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","names":["app.auth/storage-key","js/app","js/app.auth","js/app.auth.state","app.auth/state","cljs.core.atom","app.auth/now-s","js/Math.floor","js/Date","app.auth/gen-str","js/Math.random","app.auth/token-expired?","token","t","or__5025__auto__","cljs.core/deref","cljs.core/not","app.auth/token-remaining-s","temp__5823__auto__","x__5110__auto__","y__5111__auto__","app.auth/authed?","and__5023__auto__","app.auth/persist!","e44197","js/localStorage","cljs.core.pr_str","_","app.auth/load!","e44204","temp__5825__auto__","s","cljs.reader.read_string","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/add-watch","app.auth/clear-timer!","id","js/clearTimeout","app.auth/schedule-refresh!","remaining","delay-ms","js/setTimeout","app.auth/refresh-async!","app.auth/set-token!","app.auth/set-redirect!","target","app.auth/take-redirect!","r","app.auth/logout!","app.auth/login-async!","js/Promise","resolve","_reject","reject","G__44222","js/Error","t2","cljs.core.assoc","G__44223"],"sourcesContent":["(ns app.auth \n  (:require\n   [cljs.reader]))\n\n(def storage-key \"uix-starter.jwt\")\n\n(defonce state\n  (atom {:token nil        ;; {:access \"...\" :refresh \"...\" :exp <unix-seconds>}\n         :redirect nil\n         :timer-id nil}))  ;; js/Timeout id for scheduled refresh\n\n(defn now-s []\n  (js/Math.floor (/ (.now js/Date) 1000)))\n\n(defn gen-str []\n  (.toString (js/Math.random) 36))\n\n(defn token-expired? [token]\n  (let [t (or token (:token @state))]\n    (if-not t\n      true\n      (<= (:exp t) (now-s)))))\n\n(defn token-remaining-s []\n  (if-let [t (:token @state)]\n    (max 0 (- (:exp t) (now-s)))\n    0))\n\n(defn authed? []\n  (and (:token @state) (not (token-expired? (:token @state)))))\n\n(defn persist! []\n  (try\n    (.setItem js/localStorage storage-key (pr-str (:token @state)))\n    (catch :default _ nil)))\n\n(defn load! []\n  (try\n    (when-let [s (.getItem js/localStorage storage-key)]\n      (when-let [t (cljs.reader/read-string s)]\n        (swap! state assoc :token t)))\n    (catch :default _ nil)))\n\n(add-watch state ::persist (fn [_ _ _ _] (persist!)))\n\n(declare refresh-async!)\n\n(defn clear-timer! []\n  (when-let [id (:timer-id @state)]\n    (js/clearTimeout id)\n    (swap! state assoc :timer-id nil)))\n\n(defn schedule-refresh! []\n  (clear-timer!)\n  (when-let [t (:token @state)]\n    (let [remaining (- (:exp t) (now-s))\n          delay-ms (* 1000 (max 0 (- remaining 10)))]\n      (when (pos? remaining)\n        (let [id (js/setTimeout (fn [] (refresh-async!)) delay-ms)]\n          (swap! state assoc :timer-id id))))))\n\n(defn set-token! [t]\n  (swap! state assoc :token t)\n  (schedule-refresh!))\n\n(defn set-redirect! [target]\n  (swap! state assoc :redirect target))\n\n(defn take-redirect! []\n  (let [r (:redirect @state)]\n    (swap! state assoc :redirect nil)\n    r))\n\n(defn logout! []\n  (clear-timer!)\n  (swap! state assoc :token nil))\n\n(defn login-async!\n  \"Fake login returning token valid for 60s.\"\n  []\n  (js/Promise.\n    (fn [resolve _reject]\n      (js/setTimeout\n        (fn []\n          (let [t {:access  (str \"acc-\" (gen-str))\n                   :refresh (str \"ref-\" (gen-str))\n                   :exp     (+ (now-s) 60)}]\n            (set-token! t)\n            (resolve t)))\n        800))))\n\n(defn refresh-async!\n  \"Fake refresh using stored refresh token. Extends expiry by 60s.\"\n  []\n  (js/Promise.\n    (fn [resolve reject]\n      (if-let [t (:token @state)]\n        (js/setTimeout\n          (fn []\n            (if (token-expired? t)\n              (do (logout!) (reject (js/Error. \"refresh: token expired\")))\n              (let [t2 (assoc t\n                              :access  (str \"acc-\" (gen-str))\n                              :exp     (+ (now-s) 60))]\n                (set-token! t2)\n                (resolve t2))))\n          500)\n        (reject (js/Error. \"refresh: no token\"))))))\n"]}