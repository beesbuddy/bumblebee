["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/buffer/index.js"],"~:js","shadow$provide.module$node_modules$buffer$index = function(require, module, exports) {\n  function createBuffer(length) {\n    if (length > 2147483647) {\n      throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n    }\n    length = new Uint8Array(length);\n    Object.setPrototypeOf(length, Buffer.prototype);\n    return length;\n  }\n  function Buffer(arg, encodingOrOffset, length) {\n    if (typeof arg === \"number\") {\n      if (typeof encodingOrOffset === \"string\") {\n        throw new TypeError('The \"string\" argument must be of type string. Received type number');\n      }\n      return allocUnsafe(arg);\n    }\n    return from(arg, encodingOrOffset, length);\n  }\n  function from(value, encodingOrOffset, length) {\n    if (typeof value === \"string\") {\n      var encoding = encodingOrOffset;\n      if (typeof encoding !== \"string\" || encoding === \"\") {\n        encoding = \"utf8\";\n      }\n      if (!Buffer.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n      }\n      encodingOrOffset = byteLength(value, encoding) | 0;\n      length = createBuffer(encodingOrOffset);\n      value = length.write(value, encoding);\n      value !== encodingOrOffset && (length = length.slice(0, value));\n      return length;\n    }\n    if (ArrayBuffer.isView(value)) {\n      return isInstance(value, Uint8Array) ? (value = new Uint8Array(value), value = fromArrayBuffer(value.buffer, value.byteOffset, value.byteLength)) : value = fromArrayLike(value), value;\n    }\n    if (value == null) {\n      throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n    }\n    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer) || typeof SharedArrayBuffer !== \"undefined\" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {\n      return fromArrayBuffer(value, encodingOrOffset, length);\n    }\n    if (typeof value === \"number\") {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n    }\n    encoding = value.valueOf && value.valueOf();\n    if (encoding != null && encoding !== value) {\n      return Buffer.from(encoding, encodingOrOffset, length);\n    }\n    if (encoding = fromObject(value)) {\n      return encoding;\n    }\n    if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === \"function\") {\n      return Buffer.from(value[Symbol.toPrimitive](\"string\"), encodingOrOffset, length);\n    }\n    throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof value);\n  }\n  function assertSize(size) {\n    if (typeof size !== \"number\") {\n      throw new TypeError('\"size\" argument must be of type number');\n    }\n    if (size < 0) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n    }\n  }\n  function allocUnsafe(size) {\n    assertSize(size);\n    return createBuffer(size < 0 ? 0 : checked(size) | 0);\n  }\n  function fromArrayLike(array) {\n    const length = array.length < 0 ? 0 : checked(array.length) | 0, buf = createBuffer(length);\n    for (let i = 0; i < length; i += 1) {\n      buf[i] = array[i] & 255;\n    }\n    return buf;\n  }\n  function fromArrayBuffer(array, byteOffset, length) {\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n      throw new RangeError('\"offset\" is outside of buffer bounds');\n    }\n    if (array.byteLength < byteOffset + (length || 0)) {\n      throw new RangeError('\"length\" is outside of buffer bounds');\n    }\n    array = byteOffset === void 0 && length === void 0 ? new Uint8Array(array) : length === void 0 ? new Uint8Array(array, byteOffset) : new Uint8Array(array, byteOffset, length);\n    Object.setPrototypeOf(array, Buffer.prototype);\n    return array;\n  }\n  function fromObject(obj) {\n    if (Buffer.isBuffer(obj)) {\n      var len = checked(obj.length) | 0;\n      const buf = createBuffer(len);\n      if (buf.length === 0) {\n        return buf;\n      }\n      obj.copy(buf, 0, 0, len);\n      return buf;\n    }\n    if (obj.length !== void 0) {\n      return (len = typeof obj.length !== \"number\") || (len = obj.length, len = len !== len), len ? createBuffer(0) : fromArrayLike(obj);\n    }\n    if (obj.type === \"Buffer\" && Array.isArray(obj.data)) {\n      return fromArrayLike(obj.data);\n    }\n  }\n  function checked(length) {\n    if (length >= 2147483647) {\n      throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + (2147483647).toString(16) + \" bytes\");\n    }\n    return length | 0;\n  }\n  function byteLength(string, encoding) {\n    if (Buffer.isBuffer(string)) {\n      return string.length;\n    }\n    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n      return string.byteLength;\n    }\n    if (typeof string !== \"string\") {\n      throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);\n    }\n    const len = string.length, mustMatch = arguments.length > 2 && arguments[2] === !0;\n    if (!mustMatch && len === 0) {\n      return 0;\n    }\n    let loweredCase = !1;\n    for (;;) {\n      switch(encoding) {\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n          return len;\n        case \"utf8\":\n        case \"utf-8\":\n          return utf8ToBytes(string).length;\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return len * 2;\n        case \"hex\":\n          return len >>> 1;\n        case \"base64\":\n          return base64ToBytes(string).length;\n        default:\n          if (loweredCase) {\n            return mustMatch ? -1 : utf8ToBytes(string).length;\n          }\n          encoding = (\"\" + encoding).toLowerCase();\n          loweredCase = !0;\n      }\n    }\n  }\n  function slowToString(encoding, start, end) {\n    let loweredCase = !1;\n    if (start === void 0 || start < 0) {\n      start = 0;\n    }\n    if (start > this.length) {\n      return \"\";\n    }\n    if (end === void 0 || end > this.length) {\n      end = this.length;\n    }\n    if (end <= 0) {\n      return \"\";\n    }\n    end >>>= 0;\n    start >>>= 0;\n    if (end <= start) {\n      return \"\";\n    }\n    for (encoding ||= \"utf8\";;) {\n      switch(encoding) {\n        case \"hex\":\n          encoding = start;\n          start = this.length;\n          if (!encoding || encoding < 0) {\n            encoding = 0;\n          }\n          if (!end || end < 0 || end > start) {\n            end = start;\n          }\n          for (start = \"\"; encoding < end; ++encoding) {\n            start += hexSliceLookupTable[this[encoding]];\n          }\n          return start;\n        case \"utf8\":\n        case \"utf-8\":\n          return utf8Slice(this, start, end);\n        case \"ascii\":\n          encoding = start;\n          start = \"\";\n          for (end = Math.min(this.length, end); encoding < end; ++encoding) {\n            start += String.fromCharCode(this[encoding] & 127);\n          }\n          return start;\n        case \"latin1\":\n        case \"binary\":\n          encoding = start;\n          start = \"\";\n          for (end = Math.min(this.length, end); encoding < end; ++encoding) {\n            start += String.fromCharCode(this[encoding]);\n          }\n          return start;\n        case \"base64\":\n          return encoding = start, end = encoding === 0 && end === this.length ? base64.fromByteArray(this) : base64.fromByteArray(this.slice(encoding, end)), end;\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          end = this.slice(start, end);\n          encoding = \"\";\n          for (start = 0; start < end.length - 1; start += 2) {\n            encoding += String.fromCharCode(end[start] + end[start + 1] * 256);\n          }\n          return encoding;\n        default:\n          if (loweredCase) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          encoding = (encoding + \"\").toLowerCase();\n          loweredCase = !0;\n      }\n    }\n  }\n  function swap(b, n, m) {\n    const i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n  }\n  function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    if (buffer.length === 0) {\n      return -1;\n    }\n    typeof byteOffset === \"string\" ? (encoding = byteOffset, byteOffset = 0) : byteOffset > 2147483647 ? byteOffset = 2147483647 : byteOffset < -2147483648 && (byteOffset = -2147483648);\n    byteOffset = +byteOffset;\n    byteOffset !== byteOffset && (byteOffset = dir ? 0 : buffer.length - 1);\n    byteOffset < 0 && (byteOffset = buffer.length + byteOffset);\n    if (byteOffset >= buffer.length) {\n      if (dir) {\n        return -1;\n      }\n      byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n      if (dir) {\n        byteOffset = 0;\n      } else {\n        return -1;\n      }\n    }\n    typeof val === \"string\" && (val = Buffer.from(val, encoding));\n    if (Buffer.isBuffer(val)) {\n      return val.length === 0 ? -1 : arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n    }\n    if (typeof val === \"number\") {\n      return val &= 255, typeof Uint8Array.prototype.indexOf === \"function\" ? dir ? Uint8Array.prototype.indexOf.call(buffer, val, byteOffset) : Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset) : arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n    }\n    throw new TypeError(\"val must be string, number or Buffer\");\n  }\n  function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    function read(buf, i) {\n      return indexSize === 1 ? buf[i] : buf.readUInt16BE(i * indexSize);\n    }\n    let indexSize = 1;\n    var arrLength = arr.length;\n    let valLength = val.length;\n    if (encoding !== void 0 && (encoding = String(encoding).toLowerCase(), encoding === \"ucs2\" || encoding === \"ucs-2\" || encoding === \"utf16le\" || encoding === \"utf-16le\")) {\n      if (arr.length < 2 || val.length < 2) {\n        return -1;\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n    if (dir) {\n      for (encoding = -1; byteOffset < arrLength; byteOffset++) {\n        if (read(arr, byteOffset) === read(val, encoding === -1 ? 0 : byteOffset - encoding)) {\n          if (encoding === -1 && (encoding = byteOffset), byteOffset - encoding + 1 === valLength) {\n            return encoding * indexSize;\n          }\n        } else {\n          encoding !== -1 && (byteOffset -= byteOffset - encoding), encoding = -1;\n        }\n      }\n    } else {\n      for (byteOffset + valLength > arrLength && (byteOffset = arrLength - valLength); byteOffset >= 0; byteOffset--) {\n        arrLength = !0;\n        for (encoding = 0; encoding < valLength; encoding++) {\n          if (read(arr, byteOffset + encoding) !== read(val, encoding)) {\n            arrLength = !1;\n            break;\n          }\n        }\n        if (arrLength) {\n          return byteOffset;\n        }\n      }\n    }\n    return -1;\n  }\n  function utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end);\n    for (var res = []; start < end;) {\n      var firstByte = buf[start];\n      let codePoint = null, bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n      if (start + bytesPerSequence <= end) {\n        let secondByte, thirdByte, fourthByte;\n        switch(bytesPerSequence) {\n          case 1:\n            firstByte < 128 && (codePoint = firstByte);\n            break;\n          case 2:\n            secondByte = buf[start + 1];\n            (secondByte & 192) === 128 && (firstByte = (firstByte & 31) << 6 | secondByte & 63, firstByte > 127 && (codePoint = firstByte));\n            break;\n          case 3:\n            secondByte = buf[start + 1];\n            thirdByte = buf[start + 2];\n            (secondByte & 192) === 128 && (thirdByte & 192) === 128 && (firstByte = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63, firstByte > 2047 && (firstByte < 55296 || firstByte > 57343) && (codePoint = firstByte));\n            break;\n          case 4:\n            secondByte = buf[start + 1], thirdByte = buf[start + 2], fourthByte = buf[start + 3], (secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128 && (firstByte = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63, firstByte > 65535 && firstByte < 1114112 && (codePoint = firstByte));\n        }\n      }\n      codePoint === null ? (codePoint = 65533, bytesPerSequence = 1) : codePoint > 65535 && (codePoint -= 65536, res.push(codePoint >>> 10 & 1023 | 55296), codePoint = 56320 | codePoint & 1023);\n      res.push(codePoint);\n      start += bytesPerSequence;\n    }\n    start = res.length;\n    if (start <= 4096) {\n      res = String.fromCharCode.apply(String, res);\n    } else {\n      buf = \"\";\n      for (end = 0; end < start;) {\n        buf += String.fromCharCode.apply(String, res.slice(end, end += 4096));\n      }\n      res = buf;\n    }\n    return res;\n  }\n  function checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0) {\n      throw new RangeError(\"offset is not uint\");\n    }\n    if (offset + ext > length) {\n      throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n  }\n  function checkInt(buf, value, offset, ext, max, min) {\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    }\n    if (value > max || value < min) {\n      throw new RangeError('\"value\" argument is out of bounds');\n    }\n    if (offset + ext > buf.length) {\n      throw new RangeError(\"Index out of range\");\n    }\n  }\n  function wrtBigUInt64LE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    min = Number(value & BigInt(4294967295));\n    buf[offset++] = min;\n    min >>= 8;\n    buf[offset++] = min;\n    min >>= 8;\n    buf[offset++] = min;\n    buf[offset++] = min >> 8;\n    value = Number(value >> BigInt(32) & BigInt(4294967295));\n    buf[offset++] = value;\n    value >>= 8;\n    buf[offset++] = value;\n    value >>= 8;\n    buf[offset++] = value;\n    buf[offset++] = value >> 8;\n    return offset;\n  }\n  function wrtBigUInt64BE(buf, value, offset, min, max) {\n    checkIntBI(value, min, max, buf, offset, 7);\n    min = Number(value & BigInt(4294967295));\n    buf[offset + 7] = min;\n    min >>= 8;\n    buf[offset + 6] = min;\n    min >>= 8;\n    buf[offset + 5] = min;\n    buf[offset + 4] = min >> 8;\n    value = Number(value >> BigInt(32) & BigInt(4294967295));\n    buf[offset + 3] = value;\n    value >>= 8;\n    buf[offset + 2] = value;\n    value >>= 8;\n    buf[offset + 1] = value;\n    buf[offset] = value >> 8;\n    return offset + 8;\n  }\n  function checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) {\n      throw new RangeError(\"Index out of range\");\n    }\n    if (offset < 0) {\n      throw new RangeError(\"Index out of range\");\n    }\n  }\n  function writeFloat(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n    ieee754.write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4;\n  }\n  function writeDouble(buf, value, offset, littleEndian, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n    ieee754.write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8;\n  }\n  function E(sym, getMessage, Base) {\n    errors[sym] = class extends Base {\n      constructor() {\n        super();\n        Object.defineProperty(this, \"message\", {value:getMessage.apply(this, arguments), writable:!0, configurable:!0});\n        this.name = `${this.name} [${sym}]`;\n        this.stack;\n        delete this.name;\n      }\n      get code() {\n        return sym;\n      }\n      set code(value) {\n        Object.defineProperty(this, \"code\", {configurable:!0, enumerable:!0, value, writable:!0});\n      }\n      toString() {\n        return `${this.name} [${sym}]: ${this.message}`;\n      }\n    };\n  }\n  function addNumericalSeparator(val) {\n    let res = \"\", i = val.length;\n    const start = val[0] === \"-\" ? 1 : 0;\n    for (; i >= start + 4; i -= 3) {\n      res = `_${val.slice(i - 3, i)}${res}`;\n    }\n    return `${val.slice(0, i)}${res}`;\n  }\n  function checkIntBI(value, min, max, buf, offset, byteLength) {\n    if (value > max || value < min) {\n      throw buf = typeof min === \"bigint\" ? \"n\" : \"\", new errors.ERR_OUT_OF_RANGE(\"value\", byteLength > 3 ? min === 0 || min === BigInt(0) ? `>= 0${buf} and < 2${buf} ** ${(byteLength + 1) * 8}${buf}` : `>= -(2${buf} ** ${(byteLength + 1) * 8 - 1}${buf}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${buf}` : `>= ${min}${buf} and <= ${max}${buf}`, value);\n    }\n    validateNumber(offset, \"offset\");\n    buf[offset] !== void 0 && buf[offset + byteLength] !== void 0 || boundsError(offset, buf.length - (byteLength + 1));\n  }\n  function validateNumber(value, name) {\n    if (typeof value !== \"number\") {\n      throw new errors.ERR_INVALID_ARG_TYPE(name, \"number\", value);\n    }\n  }\n  function boundsError(value, length, type) {\n    if (Math.floor(value) !== value) {\n      throw validateNumber(value, type), new errors.ERR_OUT_OF_RANGE(type || \"offset\", \"an integer\", value);\n    }\n    if (length < 0) {\n      throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();\n    }\n    throw new errors.ERR_OUT_OF_RANGE(type || \"offset\", `>= ${type ? 1 : 0} and <= ${length}`, value);\n  }\n  function utf8ToBytes(string, units) {\n    units = units || Infinity;\n    let codePoint;\n    const length = string.length;\n    let leadSurrogate = null;\n    const bytes = [];\n    for (let i = 0; i < length; ++i) {\n      codePoint = string.charCodeAt(i);\n      if (codePoint > 55295 && codePoint < 57344) {\n        if (!leadSurrogate) {\n          if (codePoint > 56319) {\n            (units -= 3) > -1 && bytes.push(239, 191, 189);\n            continue;\n          } else if (i + 1 === length) {\n            (units -= 3) > -1 && bytes.push(239, 191, 189);\n            continue;\n          }\n          leadSurrogate = codePoint;\n          continue;\n        }\n        if (codePoint < 56320) {\n          (units -= 3) > -1 && bytes.push(239, 191, 189);\n          leadSurrogate = codePoint;\n          continue;\n        }\n        codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n      } else {\n        leadSurrogate && (units -= 3) > -1 && bytes.push(239, 191, 189);\n      }\n      leadSurrogate = null;\n      if (codePoint < 128) {\n        if (--units < 0) {\n          break;\n        }\n        bytes.push(codePoint);\n      } else if (codePoint < 2048) {\n        if ((units -= 2) < 0) {\n          break;\n        }\n        bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);\n      } else if (codePoint < 65536) {\n        if ((units -= 3) < 0) {\n          break;\n        }\n        bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n      } else if (codePoint < 1114112) {\n        if ((units -= 4) < 0) {\n          break;\n        }\n        bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n      } else {\n        throw Error(\"Invalid code point\");\n      }\n    }\n    return bytes;\n  }\n  function base64ToBytes(str) {\n    var JSCompiler_temp_const = base64, JSCompiler_temp_const$jscomp$0 = JSCompiler_temp_const.toByteArray;\n    str = str.split(\"\\x3d\")[0];\n    str = str.trim().replace(INVALID_BASE64_RE, \"\");\n    if (str.length < 2) {\n      str = \"\";\n    } else {\n      for (; str.length % 4 !== 0;) {\n        str += \"\\x3d\";\n      }\n    }\n    return JSCompiler_temp_const$jscomp$0.call(JSCompiler_temp_const, str);\n  }\n  function blitBuffer(src, dst, offset, length) {\n    let i;\n    for (i = 0; i < length && !(i + offset >= dst.length || i >= src.length); ++i) {\n      dst[i + offset] = src[i];\n    }\n    return i;\n  }\n  function isInstance(obj, type) {\n    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n  }\n  function defineBigIntMethod(fn) {\n    return typeof BigInt === \"undefined\" ? BufferBigIntNotDefined : fn;\n  }\n  function BufferBigIntNotDefined() {\n    throw Error(\"BigInt not supported\");\n  }\n  const base64 = require(\"module$node_modules$base64_js$index\"), ieee754 = require(\"module$node_modules$ieee754$index\");\n  require = typeof Symbol === \"function\" && typeof Symbol[\"for\"] === \"function\" ? Symbol[\"for\"](\"nodejs.util.inspect.custom\") : null;\n  exports.Buffer = Buffer;\n  exports.SlowBuffer = function(length) {\n    +length != length && (length = 0);\n    return Buffer.alloc(+length);\n  };\n  exports.INSPECT_MAX_BYTES = 50;\n  exports.kMaxLength = 2147483647;\n  Buffer.TYPED_ARRAY_SUPPORT = function() {\n    try {\n      const arr = new Uint8Array(1), proto = {foo:function() {\n        return 42;\n      }};\n      Object.setPrototypeOf(proto, Uint8Array.prototype);\n      Object.setPrototypeOf(arr, proto);\n      return arr.foo() === 42;\n    } catch (e) {\n      return !1;\n    }\n  }();\n  Buffer.TYPED_ARRAY_SUPPORT || typeof console === \"undefined\" || typeof console.error !== \"function\" || console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n  Object.defineProperty(Buffer.prototype, \"parent\", {enumerable:!0, get:function() {\n    if (Buffer.isBuffer(this)) {\n      return this.buffer;\n    }\n  }});\n  Object.defineProperty(Buffer.prototype, \"offset\", {enumerable:!0, get:function() {\n    if (Buffer.isBuffer(this)) {\n      return this.byteOffset;\n    }\n  }});\n  Buffer.poolSize = 8192;\n  Buffer.from = function(value, encodingOrOffset, length) {\n    return from(value, encodingOrOffset, length);\n  };\n  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\n  Object.setPrototypeOf(Buffer, Uint8Array);\n  Buffer.alloc = function(size, fill, encoding) {\n    assertSize(size);\n    size = size <= 0 ? createBuffer(size) : fill !== void 0 ? typeof encoding === \"string\" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill) : createBuffer(size);\n    return size;\n  };\n  Buffer.allocUnsafe = function(size) {\n    return allocUnsafe(size);\n  };\n  Buffer.allocUnsafeSlow = function(size) {\n    return allocUnsafe(size);\n  };\n  Buffer.isBuffer = function(b) {\n    return b != null && b._isBuffer === !0 && b !== Buffer.prototype;\n  };\n  Buffer.compare = function(a, b) {\n    isInstance(a, Uint8Array) && (a = Buffer.from(a, a.offset, a.byteLength));\n    isInstance(b, Uint8Array) && (b = Buffer.from(b, b.offset, b.byteLength));\n    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n      throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n    }\n    if (a === b) {\n      return 0;\n    }\n    let x = a.length, y = b.length;\n    for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n      if (a[i] !== b[i]) {\n        x = a[i];\n        y = b[i];\n        break;\n      }\n    }\n    return x < y ? -1 : y < x ? 1 : 0;\n  };\n  Buffer.isEncoding = function(encoding) {\n    switch(String(encoding).toLowerCase()) {\n      case \"hex\":\n      case \"utf8\":\n      case \"utf-8\":\n      case \"ascii\":\n      case \"latin1\":\n      case \"binary\":\n      case \"base64\":\n      case \"ucs2\":\n      case \"ucs-2\":\n      case \"utf16le\":\n      case \"utf-16le\":\n        return !0;\n      default:\n        return !1;\n    }\n  };\n  Buffer.concat = function(list, length) {\n    if (!Array.isArray(list)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers');\n    }\n    if (list.length === 0) {\n      return Buffer.alloc(0);\n    }\n    let i;\n    if (length === void 0) {\n      for (i = length = 0; i < list.length; ++i) {\n        length += list[i].length;\n      }\n    }\n    length = Buffer.allocUnsafe(length);\n    let pos = 0;\n    for (i = 0; i < list.length; ++i) {\n      let buf = list[i];\n      if (isInstance(buf, Uint8Array)) {\n        pos + buf.length > length.length ? (Buffer.isBuffer(buf) || (buf = Buffer.from(buf)), buf.copy(length, pos)) : Uint8Array.prototype.set.call(length, buf, pos);\n      } else if (Buffer.isBuffer(buf)) {\n        buf.copy(length, pos);\n      } else {\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      }\n      pos += buf.length;\n    }\n    return length;\n  };\n  Buffer.byteLength = byteLength;\n  Buffer.prototype._isBuffer = !0;\n  Buffer.prototype.swap16 = function() {\n    const len = this.length;\n    if (len % 2 !== 0) {\n      throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n    }\n    for (let i = 0; i < len; i += 2) {\n      swap(this, i, i + 1);\n    }\n    return this;\n  };\n  Buffer.prototype.swap32 = function() {\n    const len = this.length;\n    if (len % 4 !== 0) {\n      throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n    }\n    for (let i = 0; i < len; i += 4) {\n      swap(this, i, i + 3), swap(this, i + 1, i + 2);\n    }\n    return this;\n  };\n  Buffer.prototype.swap64 = function() {\n    const len = this.length;\n    if (len % 8 !== 0) {\n      throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n    }\n    for (let i = 0; i < len; i += 8) {\n      swap(this, i, i + 7), swap(this, i + 1, i + 6), swap(this, i + 2, i + 5), swap(this, i + 3, i + 4);\n    }\n    return this;\n  };\n  Buffer.prototype.toString = function() {\n    const length = this.length;\n    return length === 0 ? \"\" : arguments.length === 0 ? utf8Slice(this, 0, length) : slowToString.apply(this, arguments);\n  };\n  Buffer.prototype.toLocaleString = Buffer.prototype.toString;\n  Buffer.prototype.equals = function(b) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError(\"Argument must be a Buffer\");\n    }\n    return this === b ? !0 : Buffer.compare(this, b) === 0;\n  };\n  Buffer.prototype.inspect = function() {\n    let str;\n    const max = exports.INSPECT_MAX_BYTES;\n    str = this.toString(\"hex\", 0, max).replace(/(.{2})/g, \"$1 \").trim();\n    this.length > max && (str += \" ... \");\n    return \"\\x3cBuffer \" + str + \"\\x3e\";\n  };\n  require && (Buffer.prototype[require] = Buffer.prototype.inspect);\n  Buffer.prototype.compare = function(target, start, end, thisStart, thisEnd) {\n    isInstance(target, Uint8Array) && (target = Buffer.from(target, target.offset, target.byteLength));\n    if (!Buffer.isBuffer(target)) {\n      throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);\n    }\n    start === void 0 && (start = 0);\n    end === void 0 && (end = target ? target.length : 0);\n    thisStart === void 0 && (thisStart = 0);\n    thisEnd === void 0 && (thisEnd = this.length);\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n      throw new RangeError(\"out of range index\");\n    }\n    if (thisStart >= thisEnd && start >= end) {\n      return 0;\n    }\n    if (thisStart >= thisEnd) {\n      return -1;\n    }\n    if (start >= end) {\n      return 1;\n    }\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n    if (this === target) {\n      return 0;\n    }\n    let x = thisEnd - thisStart, y = end - start;\n    const len = Math.min(x, y);\n    thisStart = this.slice(thisStart, thisEnd);\n    target = target.slice(start, end);\n    for (start = 0; start < len; ++start) {\n      if (thisStart[start] !== target[start]) {\n        x = thisStart[start];\n        y = target[start];\n        break;\n      }\n    }\n    return x < y ? -1 : y < x ? 1 : 0;\n  };\n  Buffer.prototype.includes = function(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1;\n  };\n  Buffer.prototype.indexOf = function(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, !0);\n  };\n  Buffer.prototype.lastIndexOf = function(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, !1);\n  };\n  Buffer.prototype.write = function(string, offset, length, encoding) {\n    if (offset === void 0) {\n      encoding = \"utf8\", length = this.length, offset = 0;\n    } else if (length === void 0 && typeof offset === \"string\") {\n      encoding = offset, length = this.length, offset = 0;\n    } else if (isFinite(offset)) {\n      offset >>>= 0, isFinite(length) ? (length >>>= 0, encoding === void 0 && (encoding = \"utf8\")) : (encoding = length, length = void 0);\n    } else {\n      throw Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n    }\n    var remaining = this.length - offset;\n    if (length === void 0 || length > remaining) {\n      length = remaining;\n    }\n    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n      throw new RangeError(\"Attempt to write outside buffer bounds\");\n    }\n    encoding ||= \"utf8\";\n    for (remaining = !1;;) {\n      switch(encoding) {\n        case \"hex\":\n          a: {\n            offset = Number(offset) || 0;\n            encoding = this.length - offset;\n            length ? (length = Number(length), length > encoding && (length = encoding)) : length = encoding;\n            encoding = string.length;\n            length > encoding / 2 && (length = encoding / 2);\n            for (encoding = 0; encoding < length; ++encoding) {\n              remaining = parseInt(string.substr(encoding * 2, 2), 16);\n              if (remaining !== remaining) {\n                string = encoding;\n                break a;\n              }\n              this[offset + encoding] = remaining;\n            }\n            string = encoding;\n          }\n          return string;\n        case \"utf8\":\n        case \"utf-8\":\n          return blitBuffer(utf8ToBytes(string, this.length - offset), this, offset, length);\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n          encoding = [];\n          for (remaining = 0; remaining < string.length; ++remaining) {\n            encoding.push(string.charCodeAt(remaining) & 255);\n          }\n          return blitBuffer(encoding, this, offset, length);\n        case \"base64\":\n          return blitBuffer(base64ToBytes(string), this, offset, length);\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          var lo = void 0;\n          encoding = this.length - offset;\n          const byteArray = [];\n          for (let i = 0; i < string.length && !((encoding -= 2) < 0); ++i) {\n            lo = string.charCodeAt(i), remaining = lo >> 8, lo %= 256, byteArray.push(lo), byteArray.push(remaining);\n          }\n          return blitBuffer(byteArray, this, offset, length);\n        default:\n          if (remaining) {\n            throw new TypeError(\"Unknown encoding: \" + encoding);\n          }\n          encoding = (\"\" + encoding).toLowerCase();\n          remaining = !0;\n      }\n    }\n  };\n  Buffer.prototype.toJSON = function() {\n    return {type:\"Buffer\", data:Array.prototype.slice.call(this._arr || this, 0)};\n  };\n  Buffer.prototype.slice = function(start, end) {\n    const len = this.length;\n    start = ~~start;\n    end = end === void 0 ? len : ~~end;\n    start < 0 ? (start += len, start < 0 && (start = 0)) : start > len && (start = len);\n    end < 0 ? (end += len, end < 0 && (end = 0)) : end > len && (end = len);\n    end < start && (end = start);\n    start = this.subarray(start, end);\n    Object.setPrototypeOf(start, Buffer.prototype);\n    return start;\n  };\n  Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function(offset, byteLength, noAssert) {\n    offset >>>= 0;\n    byteLength >>>= 0;\n    noAssert || checkOffset(offset, byteLength, this.length);\n    noAssert = this[offset];\n    let mul = 1, i = 0;\n    for (; ++i < byteLength && (mul *= 256);) {\n      noAssert += this[offset + i] * mul;\n    }\n    return noAssert;\n  };\n  Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function(offset, byteLength, noAssert) {\n    offset >>>= 0;\n    byteLength >>>= 0;\n    noAssert || checkOffset(offset, byteLength, this.length);\n    noAssert = this[offset + --byteLength];\n    let mul = 1;\n    for (; byteLength > 0 && (mul *= 256);) {\n      noAssert += this[offset + --byteLength] * mul;\n    }\n    return noAssert;\n  };\n  Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 1, this.length);\n    return this[offset];\n  };\n  Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 2, this.length);\n    return this[offset] | this[offset + 1] << 8;\n  };\n  Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 2, this.length);\n    return this[offset] << 8 | this[offset + 1];\n  };\n  Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 4, this.length);\n    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;\n  };\n  Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 4, this.length);\n    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n  };\n  Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function(offset) {\n    offset >>>= 0;\n    validateNumber(offset, \"offset\");\n    var first = this[offset];\n    const last = this[offset + 7];\n    first !== void 0 && last !== void 0 || boundsError(offset, this.length - 8);\n    first = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;\n    offset = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;\n    return BigInt(first) + (BigInt(offset) << BigInt(32));\n  });\n  Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function(offset) {\n    offset >>>= 0;\n    validateNumber(offset, \"offset\");\n    var first = this[offset];\n    const last = this[offset + 7];\n    first !== void 0 && last !== void 0 || boundsError(offset, this.length - 8);\n    first = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];\n    offset = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;\n    return (BigInt(first) << BigInt(32)) + BigInt(offset);\n  });\n  Buffer.prototype.readIntLE = function(offset, byteLength, noAssert) {\n    offset >>>= 0;\n    byteLength >>>= 0;\n    noAssert || checkOffset(offset, byteLength, this.length);\n    noAssert = this[offset];\n    let mul = 1, i = 0;\n    for (; ++i < byteLength && (mul *= 256);) {\n      noAssert += this[offset + i] * mul;\n    }\n    noAssert >= mul * 128 && (noAssert -= Math.pow(2, 8 * byteLength));\n    return noAssert;\n  };\n  Buffer.prototype.readIntBE = function(offset, byteLength, noAssert) {\n    offset >>>= 0;\n    byteLength >>>= 0;\n    noAssert || checkOffset(offset, byteLength, this.length);\n    noAssert = byteLength;\n    let mul = 1, val = this[offset + --noAssert];\n    for (; noAssert > 0 && (mul *= 256);) {\n      val += this[offset + --noAssert] * mul;\n    }\n    val >= mul * 128 && (val -= Math.pow(2, 8 * byteLength));\n    return val;\n  };\n  Buffer.prototype.readInt8 = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 1, this.length);\n    return this[offset] & 128 ? (255 - this[offset] + 1) * -1 : this[offset];\n  };\n  Buffer.prototype.readInt16LE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 2, this.length);\n    offset = this[offset] | this[offset + 1] << 8;\n    return offset & 32768 ? offset | 4294901760 : offset;\n  };\n  Buffer.prototype.readInt16BE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 2, this.length);\n    offset = this[offset + 1] | this[offset] << 8;\n    return offset & 32768 ? offset | 4294901760 : offset;\n  };\n  Buffer.prototype.readInt32LE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 4, this.length);\n    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n  };\n  Buffer.prototype.readInt32BE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 4, this.length);\n    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n  };\n  Buffer.prototype.readBigInt64LE = defineBigIntMethod(function(offset) {\n    offset >>>= 0;\n    validateNumber(offset, \"offset\");\n    const first = this[offset], last = this[offset + 7];\n    first !== void 0 && last !== void 0 || boundsError(offset, this.length - 8);\n    return (BigInt(this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24)) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);\n  });\n  Buffer.prototype.readBigInt64BE = defineBigIntMethod(function(offset) {\n    offset >>>= 0;\n    validateNumber(offset, \"offset\");\n    var first = this[offset];\n    const last = this[offset + 7];\n    first !== void 0 && last !== void 0 || boundsError(offset, this.length - 8);\n    first = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];\n    return (BigInt(first) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);\n  });\n  Buffer.prototype.readFloatLE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, !0, 23, 4);\n  };\n  Buffer.prototype.readFloatBE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 4, this.length);\n    return ieee754.read(this, offset, !1, 23, 4);\n  };\n  Buffer.prototype.readDoubleLE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, !0, 52, 8);\n  };\n  Buffer.prototype.readDoubleBE = function(offset, noAssert) {\n    offset >>>= 0;\n    noAssert || checkOffset(offset, 8, this.length);\n    return ieee754.read(this, offset, !1, 52, 8);\n  };\n  Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    byteLength >>>= 0;\n    noAssert || checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);\n    noAssert = 1;\n    let i = 0;\n    for (this[offset] = value & 255; ++i < byteLength && (noAssert *= 256);) {\n      this[offset + i] = value / noAssert & 255;\n    }\n    return offset + byteLength;\n  };\n  Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    byteLength >>>= 0;\n    noAssert || checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);\n    noAssert = byteLength - 1;\n    let mul = 1;\n    for (this[offset + noAssert] = value & 255; --noAssert >= 0 && (mul *= 256);) {\n      this[offset + noAssert] = value / mul & 255;\n    }\n    return offset + byteLength;\n  };\n  Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 1, 255, 0);\n    this[offset] = value & 255;\n    return offset + 1;\n  };\n  Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 2, 65535, 0);\n    this[offset] = value & 255;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n  };\n  Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 2, 65535, 0);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 255;\n    return offset + 2;\n  };\n  Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 4, 4294967295, 0);\n    this[offset + 3] = value >>> 24;\n    this[offset + 2] = value >>> 16;\n    this[offset + 1] = value >>> 8;\n    this[offset] = value & 255;\n    return offset + 4;\n  };\n  Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 4, 4294967295, 0);\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 255;\n    return offset + 4;\n  };\n  Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function(value, offset = 0) {\n    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n  });\n  Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function(value, offset = 0) {\n    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n  });\n  Buffer.prototype.writeIntLE = function(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || (noAssert = Math.pow(2, 8 * byteLength - 1), checkInt(this, value, offset, byteLength, noAssert - 1, -noAssert));\n    noAssert = 0;\n    let mul = 1, sub = 0;\n    for (this[offset] = value & 255; ++noAssert < byteLength && (mul *= 256);) {\n      value < 0 && sub === 0 && this[offset + noAssert - 1] !== 0 && (sub = 1), this[offset + noAssert] = (value / mul >> 0) - sub & 255;\n    }\n    return offset + byteLength;\n  };\n  Buffer.prototype.writeIntBE = function(value, offset, byteLength, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || (noAssert = Math.pow(2, 8 * byteLength - 1), checkInt(this, value, offset, byteLength, noAssert - 1, -noAssert));\n    noAssert = byteLength - 1;\n    let mul = 1, sub = 0;\n    for (this[offset + noAssert] = value & 255; --noAssert >= 0 && (mul *= 256);) {\n      value < 0 && sub === 0 && this[offset + noAssert + 1] !== 0 && (sub = 1), this[offset + noAssert] = (value / mul >> 0) - sub & 255;\n    }\n    return offset + byteLength;\n  };\n  Buffer.prototype.writeInt8 = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 1, 127, -128);\n    value < 0 && (value = 255 + value + 1);\n    this[offset] = value & 255;\n    return offset + 1;\n  };\n  Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 2, 32767, -32768);\n    this[offset] = value & 255;\n    this[offset + 1] = value >>> 8;\n    return offset + 2;\n  };\n  Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 2, 32767, -32768);\n    this[offset] = value >>> 8;\n    this[offset + 1] = value & 255;\n    return offset + 2;\n  };\n  Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);\n    this[offset] = value & 255;\n    this[offset + 1] = value >>> 8;\n    this[offset + 2] = value >>> 16;\n    this[offset + 3] = value >>> 24;\n    return offset + 4;\n  };\n  Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {\n    value = +value;\n    offset >>>= 0;\n    noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648);\n    value < 0 && (value = 4294967295 + value + 1);\n    this[offset] = value >>> 24;\n    this[offset + 1] = value >>> 16;\n    this[offset + 2] = value >>> 8;\n    this[offset + 3] = value & 255;\n    return offset + 4;\n  };\n  Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function(value, offset = 0) {\n    return wrtBigUInt64LE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n  });\n  Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function(value, offset = 0) {\n    return wrtBigUInt64BE(this, value, offset, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n  });\n  Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {\n    return writeFloat(this, value, offset, !0, noAssert);\n  };\n  Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {\n    return writeFloat(this, value, offset, !1, noAssert);\n  };\n  Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {\n    return writeDouble(this, value, offset, !0, noAssert);\n  };\n  Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {\n    return writeDouble(this, value, offset, !1, noAssert);\n  };\n  Buffer.prototype.copy = function(target, targetStart, start, end) {\n    if (!Buffer.isBuffer(target)) {\n      throw new TypeError(\"argument should be a Buffer\");\n    }\n    start ||= 0;\n    end || end === 0 || (end = this.length);\n    targetStart >= target.length && (targetStart = target.length);\n    targetStart ||= 0;\n    end > 0 && end < start && (end = start);\n    if (end === start || target.length === 0 || this.length === 0) {\n      return 0;\n    }\n    if (targetStart < 0) {\n      throw new RangeError(\"targetStart out of bounds\");\n    }\n    if (start < 0 || start >= this.length) {\n      throw new RangeError(\"Index out of range\");\n    }\n    if (end < 0) {\n      throw new RangeError(\"sourceEnd out of bounds\");\n    }\n    end > this.length && (end = this.length);\n    target.length - targetStart < end - start && (end = target.length - targetStart + start);\n    const len = end - start;\n    this === target && typeof Uint8Array.prototype.copyWithin === \"function\" ? this.copyWithin(targetStart, start, end) : Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n    return len;\n  };\n  Buffer.prototype.fill = function(val, start, end, encoding) {\n    if (typeof val === \"string\") {\n      typeof start === \"string\" ? (encoding = start, start = 0, end = this.length) : typeof end === \"string\" && (encoding = end, end = this.length);\n      if (encoding !== void 0 && typeof encoding !== \"string\") {\n        throw new TypeError(\"encoding must be a string\");\n      }\n      if (typeof encoding === \"string\" && !Buffer.isEncoding(encoding)) {\n        throw new TypeError(\"Unknown encoding: \" + encoding);\n      }\n      if (val.length === 1) {\n        var code = val.charCodeAt(0);\n        if (encoding === \"utf8\" && code < 128 || encoding === \"latin1\") {\n          val = code;\n        }\n      }\n    } else {\n      typeof val === \"number\" ? val &= 255 : typeof val === \"boolean\" && (val = Number(val));\n    }\n    if (start < 0 || this.length < start || this.length < end) {\n      throw new RangeError(\"Out of range index\");\n    }\n    if (end <= start) {\n      return this;\n    }\n    start >>>= 0;\n    end = end === void 0 ? this.length : end >>> 0;\n    val ||= 0;\n    if (typeof val === \"number\") {\n      for (encoding = start; encoding < end; ++encoding) {\n        this[encoding] = val;\n      }\n    } else {\n      code = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n      const len = code.length;\n      if (len === 0) {\n        throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n      }\n      for (encoding = 0; encoding < end - start; ++encoding) {\n        this[encoding + start] = code[encoding % len];\n      }\n    }\n    return this;\n  };\n  const errors = {};\n  E(\"ERR_BUFFER_OUT_OF_BOUNDS\", function(name) {\n    return name ? `${name} is outside of buffer bounds` : \"Attempt to access memory outside buffer bounds\";\n  }, RangeError);\n  E(\"ERR_INVALID_ARG_TYPE\", function(name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`;\n  }, TypeError);\n  E(\"ERR_OUT_OF_RANGE\", function(str, range, input) {\n    str = `The value of \"${str}\" is out of range.`;\n    let received = input;\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input));\n    } else if (typeof input === \"bigint\") {\n      received = String(input);\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received);\n      }\n      received += \"n\";\n    }\n    return str + ` It must be ${range}. Received ${received}`;\n  }, RangeError);\n  const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g, hexSliceLookupTable = function() {\n    const table = Array(256);\n    for (let i = 0; i < 16; ++i) {\n      const i16 = i * 16;\n      for (let j = 0; j < 16; ++j) {\n        table[i16 + j] = \"0123456789abcdef\"[i] + \"0123456789abcdef\"[j];\n      }\n    }\n    return table;\n  }();\n};\n","~:source","shadow$provide[\"module$node_modules$buffer$index\"] = function(require,module,exports) {\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$ieee754$index","~$shadow.js","~$module$node_modules$base64_js$index"]],"~:properties",["^5",["readUIntBE","message","foo","compare","writeInt8","kMaxLength","includes","readUint16BE","readDoubleBE","toLocaleString","readFloatLE","offset","readUInt8","copy","readUint32LE","swap32","byteLength","writeBigInt64LE","swap16","readInt8","readBigUInt64LE","readUint32BE","writeUint8","writeIntBE","writeBigUInt64LE","readInt16LE","allocUnsafeSlow","parent","poolSize","writeUint32BE","readUInt16LE","writeUIntBE","_isBuffer","inspect","writeInt32BE","readUintBE","toString","readUInt16BE","writeUInt32BE","readUint16LE","Buffer","SlowBuffer","writeUint16LE","writeBigUInt64BE","name","writeInt32LE","configurable","writeUInt16LE","writeUint32LE","value","readIntLE","writeInt16LE","lastIndexOf","allocUnsafe","enumerable","alloc","readUInt32LE","readUIntLE","writeFloatBE","writeUInt8","fill","writable","writeDoubleBE","writeInt16BE","readUInt32BE","concat","readDoubleLE","readBigInt64BE","writeUintLE","writeUint16BE","readInt16BE","type","writeUInt32LE","readUint8","readBigInt64LE","readBigUInt64BE","from","isEncoding","writeFloatLE","slice","isBuffer","writeBigInt64BE","writeDoubleLE","readIntBE","readInt32LE","indexOf","INSPECT_MAX_BYTES","readInt32BE","write","writeUintBE","writeUInt16BE","swap64","writeUIntLE","TYPED_ARRAY_SUPPORT","data","get","equals","code","readFloatBE","writeIntLE","readUintLE","toJSON"]],"~:compiled-at",1758108455890,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$buffer$index.js\",\n\"lineCount\":1270,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/buffer/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$buffer$index\\\"] = function(require,module,exports) {\\n/*!\\n * The buffer module from node.js, for the browser.\\n *\\n * @author   Feross Aboukhadijeh <https://feross.org>\\n * @license  MIT\\n */\\n/* eslint-disable no-proto */\\n\\n'use strict'\\n\\nconst base64 = require('base64-js')\\nconst ieee754 = require('ieee754')\\nconst customInspectSymbol =\\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\\n    : null\\n\\nexports.Buffer = Buffer\\nexports.SlowBuffer = SlowBuffer\\nexports.INSPECT_MAX_BYTES = 50\\n\\nconst K_MAX_LENGTH = 0x7fffffff\\nexports.kMaxLength = K_MAX_LENGTH\\n\\n/**\\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\\n *   === true    Use Uint8Array implementation (fastest)\\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\\n *               implementation (most compatible, even IE6)\\n *\\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\\n * Opera 11.6+, iOS 4.2+.\\n *\\n * We report that the browser does not support typed arrays if the are not subclassable\\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\\n * for __proto__ and has a buggy typed array implementation.\\n */\\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\\n\\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\\n    typeof console.error === 'function') {\\n  console.error(\\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\\n  )\\n}\\n\\nfunction typedArraySupport () {\\n  // Can typed array instances can be augmented?\\n  try {\\n    const arr = new Uint8Array(1)\\n    const proto = { foo: function () { return 42 } }\\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\\n    Object.setPrototypeOf(arr, proto)\\n    return arr.foo() === 42\\n  } catch (e) {\\n    return false\\n  }\\n}\\n\\nObject.defineProperty(Buffer.prototype, 'parent', {\\n  enumerable: true,\\n  get: function () {\\n    if (!Buffer.isBuffer(this)) return undefined\\n    return this.buffer\\n  }\\n})\\n\\nObject.defineProperty(Buffer.prototype, 'offset', {\\n  enumerable: true,\\n  get: function () {\\n    if (!Buffer.isBuffer(this)) return undefined\\n    return this.byteOffset\\n  }\\n})\\n\\nfunction createBuffer (length) {\\n  if (length > K_MAX_LENGTH) {\\n    throw new RangeError('The value \\\"' + length + '\\\" is invalid for option \\\"size\\\"')\\n  }\\n  // Return an augmented `Uint8Array` instance\\n  const buf = new Uint8Array(length)\\n  Object.setPrototypeOf(buf, Buffer.prototype)\\n  return buf\\n}\\n\\n/**\\n * The Buffer constructor returns instances of `Uint8Array` that have their\\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\\n * returns a single octet.\\n *\\n * The `Uint8Array` prototype remains unmodified.\\n */\\n\\nfunction Buffer (arg, encodingOrOffset, length) {\\n  // Common case.\\n  if (typeof arg === 'number') {\\n    if (typeof encodingOrOffset === 'string') {\\n      throw new TypeError(\\n        'The \\\"string\\\" argument must be of type string. Received type number'\\n      )\\n    }\\n    return allocUnsafe(arg)\\n  }\\n  return from(arg, encodingOrOffset, length)\\n}\\n\\nBuffer.poolSize = 8192 // not used by this implementation\\n\\nfunction from (value, encodingOrOffset, length) {\\n  if (typeof value === 'string') {\\n    return fromString(value, encodingOrOffset)\\n  }\\n\\n  if (ArrayBuffer.isView(value)) {\\n    return fromArrayView(value)\\n  }\\n\\n  if (value == null) {\\n    throw new TypeError(\\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\\n      'or Array-like Object. Received type ' + (typeof value)\\n    )\\n  }\\n\\n  if (isInstance(value, ArrayBuffer) ||\\n      (value && isInstance(value.buffer, ArrayBuffer))) {\\n    return fromArrayBuffer(value, encodingOrOffset, length)\\n  }\\n\\n  if (typeof SharedArrayBuffer !== 'undefined' &&\\n      (isInstance(value, SharedArrayBuffer) ||\\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\\n    return fromArrayBuffer(value, encodingOrOffset, length)\\n  }\\n\\n  if (typeof value === 'number') {\\n    throw new TypeError(\\n      'The \\\"value\\\" argument must not be of type number. Received type number'\\n    )\\n  }\\n\\n  const valueOf = value.valueOf && value.valueOf()\\n  if (valueOf != null && valueOf !== value) {\\n    return Buffer.from(valueOf, encodingOrOffset, length)\\n  }\\n\\n  const b = fromObject(value)\\n  if (b) return b\\n\\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\\n      typeof value[Symbol.toPrimitive] === 'function') {\\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\\n  }\\n\\n  throw new TypeError(\\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\\n    'or Array-like Object. Received type ' + (typeof value)\\n  )\\n}\\n\\n/**\\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\\n * if value is a number.\\n * Buffer.from(str[, encoding])\\n * Buffer.from(array)\\n * Buffer.from(buffer)\\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\\n **/\\nBuffer.from = function (value, encodingOrOffset, length) {\\n  return from(value, encodingOrOffset, length)\\n}\\n\\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\\n// https://github.com/feross/buffer/pull/148\\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\\nObject.setPrototypeOf(Buffer, Uint8Array)\\n\\nfunction assertSize (size) {\\n  if (typeof size !== 'number') {\\n    throw new TypeError('\\\"size\\\" argument must be of type number')\\n  } else if (size < 0) {\\n    throw new RangeError('The value \\\"' + size + '\\\" is invalid for option \\\"size\\\"')\\n  }\\n}\\n\\nfunction alloc (size, fill, encoding) {\\n  assertSize(size)\\n  if (size <= 0) {\\n    return createBuffer(size)\\n  }\\n  if (fill !== undefined) {\\n    // Only pay attention to encoding if it's a string. This\\n    // prevents accidentally sending in a number that would\\n    // be interpreted as a start offset.\\n    return typeof encoding === 'string'\\n      ? createBuffer(size).fill(fill, encoding)\\n      : createBuffer(size).fill(fill)\\n  }\\n  return createBuffer(size)\\n}\\n\\n/**\\n * Creates a new filled Buffer instance.\\n * alloc(size[, fill[, encoding]])\\n **/\\nBuffer.alloc = function (size, fill, encoding) {\\n  return alloc(size, fill, encoding)\\n}\\n\\nfunction allocUnsafe (size) {\\n  assertSize(size)\\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\\n}\\n\\n/**\\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\\n * */\\nBuffer.allocUnsafe = function (size) {\\n  return allocUnsafe(size)\\n}\\n/**\\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\\n */\\nBuffer.allocUnsafeSlow = function (size) {\\n  return allocUnsafe(size)\\n}\\n\\nfunction fromString (string, encoding) {\\n  if (typeof encoding !== 'string' || encoding === '') {\\n    encoding = 'utf8'\\n  }\\n\\n  if (!Buffer.isEncoding(encoding)) {\\n    throw new TypeError('Unknown encoding: ' + encoding)\\n  }\\n\\n  const length = byteLength(string, encoding) | 0\\n  let buf = createBuffer(length)\\n\\n  const actual = buf.write(string, encoding)\\n\\n  if (actual !== length) {\\n    // Writing a hex string, for example, that contains invalid characters will\\n    // cause everything after the first invalid character to be ignored. (e.g.\\n    // 'abxxcd' will be treated as 'ab')\\n    buf = buf.slice(0, actual)\\n  }\\n\\n  return buf\\n}\\n\\nfunction fromArrayLike (array) {\\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\\n  const buf = createBuffer(length)\\n  for (let i = 0; i < length; i += 1) {\\n    buf[i] = array[i] & 255\\n  }\\n  return buf\\n}\\n\\nfunction fromArrayView (arrayView) {\\n  if (isInstance(arrayView, Uint8Array)) {\\n    const copy = new Uint8Array(arrayView)\\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\\n  }\\n  return fromArrayLike(arrayView)\\n}\\n\\nfunction fromArrayBuffer (array, byteOffset, length) {\\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\\n    throw new RangeError('\\\"offset\\\" is outside of buffer bounds')\\n  }\\n\\n  if (array.byteLength < byteOffset + (length || 0)) {\\n    throw new RangeError('\\\"length\\\" is outside of buffer bounds')\\n  }\\n\\n  let buf\\n  if (byteOffset === undefined && length === undefined) {\\n    buf = new Uint8Array(array)\\n  } else if (length === undefined) {\\n    buf = new Uint8Array(array, byteOffset)\\n  } else {\\n    buf = new Uint8Array(array, byteOffset, length)\\n  }\\n\\n  // Return an augmented `Uint8Array` instance\\n  Object.setPrototypeOf(buf, Buffer.prototype)\\n\\n  return buf\\n}\\n\\nfunction fromObject (obj) {\\n  if (Buffer.isBuffer(obj)) {\\n    const len = checked(obj.length) | 0\\n    const buf = createBuffer(len)\\n\\n    if (buf.length === 0) {\\n      return buf\\n    }\\n\\n    obj.copy(buf, 0, 0, len)\\n    return buf\\n  }\\n\\n  if (obj.length !== undefined) {\\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\\n      return createBuffer(0)\\n    }\\n    return fromArrayLike(obj)\\n  }\\n\\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\\n    return fromArrayLike(obj.data)\\n  }\\n}\\n\\nfunction checked (length) {\\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\\n  // length is NaN (which is otherwise coerced to zero.)\\n  if (length >= K_MAX_LENGTH) {\\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\\n  }\\n  return length | 0\\n}\\n\\nfunction SlowBuffer (length) {\\n  if (+length != length) { // eslint-disable-line eqeqeq\\n    length = 0\\n  }\\n  return Buffer.alloc(+length)\\n}\\n\\nBuffer.isBuffer = function isBuffer (b) {\\n  return b != null && b._isBuffer === true &&\\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\\n}\\n\\nBuffer.compare = function compare (a, b) {\\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\\n    throw new TypeError(\\n      'The \\\"buf1\\\", \\\"buf2\\\" arguments must be one of type Buffer or Uint8Array'\\n    )\\n  }\\n\\n  if (a === b) return 0\\n\\n  let x = a.length\\n  let y = b.length\\n\\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\\n    if (a[i] !== b[i]) {\\n      x = a[i]\\n      y = b[i]\\n      break\\n    }\\n  }\\n\\n  if (x < y) return -1\\n  if (y < x) return 1\\n  return 0\\n}\\n\\nBuffer.isEncoding = function isEncoding (encoding) {\\n  switch (String(encoding).toLowerCase()) {\\n    case 'hex':\\n    case 'utf8':\\n    case 'utf-8':\\n    case 'ascii':\\n    case 'latin1':\\n    case 'binary':\\n    case 'base64':\\n    case 'ucs2':\\n    case 'ucs-2':\\n    case 'utf16le':\\n    case 'utf-16le':\\n      return true\\n    default:\\n      return false\\n  }\\n}\\n\\nBuffer.concat = function concat (list, length) {\\n  if (!Array.isArray(list)) {\\n    throw new TypeError('\\\"list\\\" argument must be an Array of Buffers')\\n  }\\n\\n  if (list.length === 0) {\\n    return Buffer.alloc(0)\\n  }\\n\\n  let i\\n  if (length === undefined) {\\n    length = 0\\n    for (i = 0; i < list.length; ++i) {\\n      length += list[i].length\\n    }\\n  }\\n\\n  const buffer = Buffer.allocUnsafe(length)\\n  let pos = 0\\n  for (i = 0; i < list.length; ++i) {\\n    let buf = list[i]\\n    if (isInstance(buf, Uint8Array)) {\\n      if (pos + buf.length > buffer.length) {\\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\\n        buf.copy(buffer, pos)\\n      } else {\\n        Uint8Array.prototype.set.call(\\n          buffer,\\n          buf,\\n          pos\\n        )\\n      }\\n    } else if (!Buffer.isBuffer(buf)) {\\n      throw new TypeError('\\\"list\\\" argument must be an Array of Buffers')\\n    } else {\\n      buf.copy(buffer, pos)\\n    }\\n    pos += buf.length\\n  }\\n  return buffer\\n}\\n\\nfunction byteLength (string, encoding) {\\n  if (Buffer.isBuffer(string)) {\\n    return string.length\\n  }\\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\\n    return string.byteLength\\n  }\\n  if (typeof string !== 'string') {\\n    throw new TypeError(\\n      'The \\\"string\\\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\\n      'Received type ' + typeof string\\n    )\\n  }\\n\\n  const len = string.length\\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\\n  if (!mustMatch && len === 0) return 0\\n\\n  // Use a for loop to avoid recursion\\n  let loweredCase = false\\n  for (;;) {\\n    switch (encoding) {\\n      case 'ascii':\\n      case 'latin1':\\n      case 'binary':\\n        return len\\n      case 'utf8':\\n      case 'utf-8':\\n        return utf8ToBytes(string).length\\n      case 'ucs2':\\n      case 'ucs-2':\\n      case 'utf16le':\\n      case 'utf-16le':\\n        return len * 2\\n      case 'hex':\\n        return len >>> 1\\n      case 'base64':\\n        return base64ToBytes(string).length\\n      default:\\n        if (loweredCase) {\\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\\n        }\\n        encoding = ('' + encoding).toLowerCase()\\n        loweredCase = true\\n    }\\n  }\\n}\\nBuffer.byteLength = byteLength\\n\\nfunction slowToString (encoding, start, end) {\\n  let loweredCase = false\\n\\n  // No need to verify that \\\"this.length <= MAX_UINT32\\\" since it's a read-only\\n  // property of a typed array.\\n\\n  // This behaves neither like String nor Uint8Array in that we set start/end\\n  // to their upper/lower bounds if the value passed is out of range.\\n  // undefined is handled specially as per ECMA-262 6th Edition,\\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\\n  if (start === undefined || start < 0) {\\n    start = 0\\n  }\\n  // Return early if start > this.length. Done here to prevent potential uint32\\n  // coercion fail below.\\n  if (start > this.length) {\\n    return ''\\n  }\\n\\n  if (end === undefined || end > this.length) {\\n    end = this.length\\n  }\\n\\n  if (end <= 0) {\\n    return ''\\n  }\\n\\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\\n  end >>>= 0\\n  start >>>= 0\\n\\n  if (end <= start) {\\n    return ''\\n  }\\n\\n  if (!encoding) encoding = 'utf8'\\n\\n  while (true) {\\n    switch (encoding) {\\n      case 'hex':\\n        return hexSlice(this, start, end)\\n\\n      case 'utf8':\\n      case 'utf-8':\\n        return utf8Slice(this, start, end)\\n\\n      case 'ascii':\\n        return asciiSlice(this, start, end)\\n\\n      case 'latin1':\\n      case 'binary':\\n        return latin1Slice(this, start, end)\\n\\n      case 'base64':\\n        return base64Slice(this, start, end)\\n\\n      case 'ucs2':\\n      case 'ucs-2':\\n      case 'utf16le':\\n      case 'utf-16le':\\n        return utf16leSlice(this, start, end)\\n\\n      default:\\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\\n        encoding = (encoding + '').toLowerCase()\\n        loweredCase = true\\n    }\\n  }\\n}\\n\\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\\n// reliably in a browserify context because there could be multiple different\\n// copies of the 'buffer' package in use. This method works even for Buffer\\n// instances that were created from another copy of the `buffer` package.\\n// See: https://github.com/feross/buffer/issues/154\\nBuffer.prototype._isBuffer = true\\n\\nfunction swap (b, n, m) {\\n  const i = b[n]\\n  b[n] = b[m]\\n  b[m] = i\\n}\\n\\nBuffer.prototype.swap16 = function swap16 () {\\n  const len = this.length\\n  if (len % 2 !== 0) {\\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\\n  }\\n  for (let i = 0; i < len; i += 2) {\\n    swap(this, i, i + 1)\\n  }\\n  return this\\n}\\n\\nBuffer.prototype.swap32 = function swap32 () {\\n  const len = this.length\\n  if (len % 4 !== 0) {\\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\\n  }\\n  for (let i = 0; i < len; i += 4) {\\n    swap(this, i, i + 3)\\n    swap(this, i + 1, i + 2)\\n  }\\n  return this\\n}\\n\\nBuffer.prototype.swap64 = function swap64 () {\\n  const len = this.length\\n  if (len % 8 !== 0) {\\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\\n  }\\n  for (let i = 0; i < len; i += 8) {\\n    swap(this, i, i + 7)\\n    swap(this, i + 1, i + 6)\\n    swap(this, i + 2, i + 5)\\n    swap(this, i + 3, i + 4)\\n  }\\n  return this\\n}\\n\\nBuffer.prototype.toString = function toString () {\\n  const length = this.length\\n  if (length === 0) return ''\\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\\n  return slowToString.apply(this, arguments)\\n}\\n\\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\\n\\nBuffer.prototype.equals = function equals (b) {\\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\\n  if (this === b) return true\\n  return Buffer.compare(this, b) === 0\\n}\\n\\nBuffer.prototype.inspect = function inspect () {\\n  let str = ''\\n  const max = exports.INSPECT_MAX_BYTES\\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\\n  if (this.length > max) str += ' ... '\\n  return '<Buffer ' + str + '>'\\n}\\nif (customInspectSymbol) {\\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\\n}\\n\\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\\n  if (isInstance(target, Uint8Array)) {\\n    target = Buffer.from(target, target.offset, target.byteLength)\\n  }\\n  if (!Buffer.isBuffer(target)) {\\n    throw new TypeError(\\n      'The \\\"target\\\" argument must be one of type Buffer or Uint8Array. ' +\\n      'Received type ' + (typeof target)\\n    )\\n  }\\n\\n  if (start === undefined) {\\n    start = 0\\n  }\\n  if (end === undefined) {\\n    end = target ? target.length : 0\\n  }\\n  if (thisStart === undefined) {\\n    thisStart = 0\\n  }\\n  if (thisEnd === undefined) {\\n    thisEnd = this.length\\n  }\\n\\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\\n    throw new RangeError('out of range index')\\n  }\\n\\n  if (thisStart >= thisEnd && start >= end) {\\n    return 0\\n  }\\n  if (thisStart >= thisEnd) {\\n    return -1\\n  }\\n  if (start >= end) {\\n    return 1\\n  }\\n\\n  start >>>= 0\\n  end >>>= 0\\n  thisStart >>>= 0\\n  thisEnd >>>= 0\\n\\n  if (this === target) return 0\\n\\n  let x = thisEnd - thisStart\\n  let y = end - start\\n  const len = Math.min(x, y)\\n\\n  const thisCopy = this.slice(thisStart, thisEnd)\\n  const targetCopy = target.slice(start, end)\\n\\n  for (let i = 0; i < len; ++i) {\\n    if (thisCopy[i] !== targetCopy[i]) {\\n      x = thisCopy[i]\\n      y = targetCopy[i]\\n      break\\n    }\\n  }\\n\\n  if (x < y) return -1\\n  if (y < x) return 1\\n  return 0\\n}\\n\\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\\n//\\n// Arguments:\\n// - buffer - a Buffer to search\\n// - val - a string, Buffer, or number\\n// - byteOffset - an index into `buffer`; will be clamped to an int32\\n// - encoding - an optional encoding, relevant is val is a string\\n// - dir - true for indexOf, false for lastIndexOf\\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\\n  // Empty buffer means no match\\n  if (buffer.length === 0) return -1\\n\\n  // Normalize byteOffset\\n  if (typeof byteOffset === 'string') {\\n    encoding = byteOffset\\n    byteOffset = 0\\n  } else if (byteOffset > 0x7fffffff) {\\n    byteOffset = 0x7fffffff\\n  } else if (byteOffset < -0x80000000) {\\n    byteOffset = -0x80000000\\n  }\\n  byteOffset = +byteOffset // Coerce to Number.\\n  if (numberIsNaN(byteOffset)) {\\n    // byteOffset: it it's undefined, null, NaN, \\\"foo\\\", etc, search whole buffer\\n    byteOffset = dir ? 0 : (buffer.length - 1)\\n  }\\n\\n  // Normalize byteOffset: negative offsets start from the end of the buffer\\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\\n  if (byteOffset >= buffer.length) {\\n    if (dir) return -1\\n    else byteOffset = buffer.length - 1\\n  } else if (byteOffset < 0) {\\n    if (dir) byteOffset = 0\\n    else return -1\\n  }\\n\\n  // Normalize val\\n  if (typeof val === 'string') {\\n    val = Buffer.from(val, encoding)\\n  }\\n\\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\\n  if (Buffer.isBuffer(val)) {\\n    // Special case: looking for empty string/buffer always fails\\n    if (val.length === 0) {\\n      return -1\\n    }\\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\\n  } else if (typeof val === 'number') {\\n    val = val & 0xFF // Search for a byte value [0-255]\\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\\n      if (dir) {\\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\\n      } else {\\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\\n      }\\n    }\\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\\n  }\\n\\n  throw new TypeError('val must be string, number or Buffer')\\n}\\n\\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\\n  let indexSize = 1\\n  let arrLength = arr.length\\n  let valLength = val.length\\n\\n  if (encoding !== undefined) {\\n    encoding = String(encoding).toLowerCase()\\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\\n        encoding === 'utf16le' || encoding === 'utf-16le') {\\n      if (arr.length < 2 || val.length < 2) {\\n        return -1\\n      }\\n      indexSize = 2\\n      arrLength /= 2\\n      valLength /= 2\\n      byteOffset /= 2\\n    }\\n  }\\n\\n  function read (buf, i) {\\n    if (indexSize === 1) {\\n      return buf[i]\\n    } else {\\n      return buf.readUInt16BE(i * indexSize)\\n    }\\n  }\\n\\n  let i\\n  if (dir) {\\n    let foundIndex = -1\\n    for (i = byteOffset; i < arrLength; i++) {\\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\\n        if (foundIndex === -1) foundIndex = i\\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\\n      } else {\\n        if (foundIndex !== -1) i -= i - foundIndex\\n        foundIndex = -1\\n      }\\n    }\\n  } else {\\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\\n    for (i = byteOffset; i >= 0; i--) {\\n      let found = true\\n      for (let j = 0; j < valLength; j++) {\\n        if (read(arr, i + j) !== read(val, j)) {\\n          found = false\\n          break\\n        }\\n      }\\n      if (found) return i\\n    }\\n  }\\n\\n  return -1\\n}\\n\\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\\n  return this.indexOf(val, byteOffset, encoding) !== -1\\n}\\n\\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\\n}\\n\\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\\n}\\n\\nfunction hexWrite (buf, string, offset, length) {\\n  offset = Number(offset) || 0\\n  const remaining = buf.length - offset\\n  if (!length) {\\n    length = remaining\\n  } else {\\n    length = Number(length)\\n    if (length > remaining) {\\n      length = remaining\\n    }\\n  }\\n\\n  const strLen = string.length\\n\\n  if (length > strLen / 2) {\\n    length = strLen / 2\\n  }\\n  let i\\n  for (i = 0; i < length; ++i) {\\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\\n    if (numberIsNaN(parsed)) return i\\n    buf[offset + i] = parsed\\n  }\\n  return i\\n}\\n\\nfunction utf8Write (buf, string, offset, length) {\\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\\n}\\n\\nfunction asciiWrite (buf, string, offset, length) {\\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\\n}\\n\\nfunction base64Write (buf, string, offset, length) {\\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\\n}\\n\\nfunction ucs2Write (buf, string, offset, length) {\\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\\n}\\n\\nBuffer.prototype.write = function write (string, offset, length, encoding) {\\n  // Buffer#write(string)\\n  if (offset === undefined) {\\n    encoding = 'utf8'\\n    length = this.length\\n    offset = 0\\n  // Buffer#write(string, encoding)\\n  } else if (length === undefined && typeof offset === 'string') {\\n    encoding = offset\\n    length = this.length\\n    offset = 0\\n  // Buffer#write(string, offset[, length][, encoding])\\n  } else if (isFinite(offset)) {\\n    offset = offset >>> 0\\n    if (isFinite(length)) {\\n      length = length >>> 0\\n      if (encoding === undefined) encoding = 'utf8'\\n    } else {\\n      encoding = length\\n      length = undefined\\n    }\\n  } else {\\n    throw new Error(\\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\\n    )\\n  }\\n\\n  const remaining = this.length - offset\\n  if (length === undefined || length > remaining) length = remaining\\n\\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\\n    throw new RangeError('Attempt to write outside buffer bounds')\\n  }\\n\\n  if (!encoding) encoding = 'utf8'\\n\\n  let loweredCase = false\\n  for (;;) {\\n    switch (encoding) {\\n      case 'hex':\\n        return hexWrite(this, string, offset, length)\\n\\n      case 'utf8':\\n      case 'utf-8':\\n        return utf8Write(this, string, offset, length)\\n\\n      case 'ascii':\\n      case 'latin1':\\n      case 'binary':\\n        return asciiWrite(this, string, offset, length)\\n\\n      case 'base64':\\n        // Warning: maxLength not taken into account in base64Write\\n        return base64Write(this, string, offset, length)\\n\\n      case 'ucs2':\\n      case 'ucs-2':\\n      case 'utf16le':\\n      case 'utf-16le':\\n        return ucs2Write(this, string, offset, length)\\n\\n      default:\\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\\n        encoding = ('' + encoding).toLowerCase()\\n        loweredCase = true\\n    }\\n  }\\n}\\n\\nBuffer.prototype.toJSON = function toJSON () {\\n  return {\\n    type: 'Buffer',\\n    data: Array.prototype.slice.call(this._arr || this, 0)\\n  }\\n}\\n\\nfunction base64Slice (buf, start, end) {\\n  if (start === 0 && end === buf.length) {\\n    return base64.fromByteArray(buf)\\n  } else {\\n    return base64.fromByteArray(buf.slice(start, end))\\n  }\\n}\\n\\nfunction utf8Slice (buf, start, end) {\\n  end = Math.min(buf.length, end)\\n  const res = []\\n\\n  let i = start\\n  while (i < end) {\\n    const firstByte = buf[i]\\n    let codePoint = null\\n    let bytesPerSequence = (firstByte > 0xEF)\\n      ? 4\\n      : (firstByte > 0xDF)\\n          ? 3\\n          : (firstByte > 0xBF)\\n              ? 2\\n              : 1\\n\\n    if (i + bytesPerSequence <= end) {\\n      let secondByte, thirdByte, fourthByte, tempCodePoint\\n\\n      switch (bytesPerSequence) {\\n        case 1:\\n          if (firstByte < 0x80) {\\n            codePoint = firstByte\\n          }\\n          break\\n        case 2:\\n          secondByte = buf[i + 1]\\n          if ((secondByte & 0xC0) === 0x80) {\\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\\n            if (tempCodePoint > 0x7F) {\\n              codePoint = tempCodePoint\\n            }\\n          }\\n          break\\n        case 3:\\n          secondByte = buf[i + 1]\\n          thirdByte = buf[i + 2]\\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\\n              codePoint = tempCodePoint\\n            }\\n          }\\n          break\\n        case 4:\\n          secondByte = buf[i + 1]\\n          thirdByte = buf[i + 2]\\n          fourthByte = buf[i + 3]\\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\\n              codePoint = tempCodePoint\\n            }\\n          }\\n      }\\n    }\\n\\n    if (codePoint === null) {\\n      // we did not generate a valid codePoint so insert a\\n      // replacement char (U+FFFD) and advance only 1 byte\\n      codePoint = 0xFFFD\\n      bytesPerSequence = 1\\n    } else if (codePoint > 0xFFFF) {\\n      // encode to utf16 (surrogate pair dance)\\n      codePoint -= 0x10000\\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\\n      codePoint = 0xDC00 | codePoint & 0x3FF\\n    }\\n\\n    res.push(codePoint)\\n    i += bytesPerSequence\\n  }\\n\\n  return decodeCodePointsArray(res)\\n}\\n\\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\\n// the lowest limit is Chrome, with 0x10000 args.\\n// We go 1 magnitude less, for safety\\nconst MAX_ARGUMENTS_LENGTH = 0x1000\\n\\nfunction decodeCodePointsArray (codePoints) {\\n  const len = codePoints.length\\n  if (len <= MAX_ARGUMENTS_LENGTH) {\\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\\n  }\\n\\n  // Decode in chunks to avoid \\\"call stack size exceeded\\\".\\n  let res = ''\\n  let i = 0\\n  while (i < len) {\\n    res += String.fromCharCode.apply(\\n      String,\\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\\n    )\\n  }\\n  return res\\n}\\n\\nfunction asciiSlice (buf, start, end) {\\n  let ret = ''\\n  end = Math.min(buf.length, end)\\n\\n  for (let i = start; i < end; ++i) {\\n    ret += String.fromCharCode(buf[i] & 0x7F)\\n  }\\n  return ret\\n}\\n\\nfunction latin1Slice (buf, start, end) {\\n  let ret = ''\\n  end = Math.min(buf.length, end)\\n\\n  for (let i = start; i < end; ++i) {\\n    ret += String.fromCharCode(buf[i])\\n  }\\n  return ret\\n}\\n\\nfunction hexSlice (buf, start, end) {\\n  const len = buf.length\\n\\n  if (!start || start < 0) start = 0\\n  if (!end || end < 0 || end > len) end = len\\n\\n  let out = ''\\n  for (let i = start; i < end; ++i) {\\n    out += hexSliceLookupTable[buf[i]]\\n  }\\n  return out\\n}\\n\\nfunction utf16leSlice (buf, start, end) {\\n  const bytes = buf.slice(start, end)\\n  let res = ''\\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\\n  for (let i = 0; i < bytes.length - 1; i += 2) {\\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\\n  }\\n  return res\\n}\\n\\nBuffer.prototype.slice = function slice (start, end) {\\n  const len = this.length\\n  start = ~~start\\n  end = end === undefined ? len : ~~end\\n\\n  if (start < 0) {\\n    start += len\\n    if (start < 0) start = 0\\n  } else if (start > len) {\\n    start = len\\n  }\\n\\n  if (end < 0) {\\n    end += len\\n    if (end < 0) end = 0\\n  } else if (end > len) {\\n    end = len\\n  }\\n\\n  if (end < start) end = start\\n\\n  const newBuf = this.subarray(start, end)\\n  // Return an augmented `Uint8Array` instance\\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\\n\\n  return newBuf\\n}\\n\\n/*\\n * Need to make sure that buffer isn't trying to write out of bounds.\\n */\\nfunction checkOffset (offset, ext, length) {\\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\\n}\\n\\nBuffer.prototype.readUintLE =\\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\\n\\n  let val = this[offset]\\n  let mul = 1\\n  let i = 0\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    val += this[offset + i] * mul\\n  }\\n\\n  return val\\n}\\n\\nBuffer.prototype.readUintBE =\\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) {\\n    checkOffset(offset, byteLength, this.length)\\n  }\\n\\n  let val = this[offset + --byteLength]\\n  let mul = 1\\n  while (byteLength > 0 && (mul *= 0x100)) {\\n    val += this[offset + --byteLength] * mul\\n  }\\n\\n  return val\\n}\\n\\nBuffer.prototype.readUint8 =\\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 1, this.length)\\n  return this[offset]\\n}\\n\\nBuffer.prototype.readUint16LE =\\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 2, this.length)\\n  return this[offset] | (this[offset + 1] << 8)\\n}\\n\\nBuffer.prototype.readUint16BE =\\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 2, this.length)\\n  return (this[offset] << 8) | this[offset + 1]\\n}\\n\\nBuffer.prototype.readUint32LE =\\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n\\n  return ((this[offset]) |\\n      (this[offset + 1] << 8) |\\n      (this[offset + 2] << 16)) +\\n      (this[offset + 3] * 0x1000000)\\n}\\n\\nBuffer.prototype.readUint32BE =\\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n\\n  return (this[offset] * 0x1000000) +\\n    ((this[offset + 1] << 16) |\\n    (this[offset + 2] << 8) |\\n    this[offset + 3])\\n}\\n\\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\\n  offset = offset >>> 0\\n  validateNumber(offset, 'offset')\\n  const first = this[offset]\\n  const last = this[offset + 7]\\n  if (first === undefined || last === undefined) {\\n    boundsError(offset, this.length - 8)\\n  }\\n\\n  const lo = first +\\n    this[++offset] * 2 ** 8 +\\n    this[++offset] * 2 ** 16 +\\n    this[++offset] * 2 ** 24\\n\\n  const hi = this[++offset] +\\n    this[++offset] * 2 ** 8 +\\n    this[++offset] * 2 ** 16 +\\n    last * 2 ** 24\\n\\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\\n})\\n\\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\\n  offset = offset >>> 0\\n  validateNumber(offset, 'offset')\\n  const first = this[offset]\\n  const last = this[offset + 7]\\n  if (first === undefined || last === undefined) {\\n    boundsError(offset, this.length - 8)\\n  }\\n\\n  const hi = first * 2 ** 24 +\\n    this[++offset] * 2 ** 16 +\\n    this[++offset] * 2 ** 8 +\\n    this[++offset]\\n\\n  const lo = this[++offset] * 2 ** 24 +\\n    this[++offset] * 2 ** 16 +\\n    this[++offset] * 2 ** 8 +\\n    last\\n\\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\\n})\\n\\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\\n\\n  let val = this[offset]\\n  let mul = 1\\n  let i = 0\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    val += this[offset + i] * mul\\n  }\\n  mul *= 0x80\\n\\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\\n\\n  return val\\n}\\n\\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\\n\\n  let i = byteLength\\n  let mul = 1\\n  let val = this[offset + --i]\\n  while (i > 0 && (mul *= 0x100)) {\\n    val += this[offset + --i] * mul\\n  }\\n  mul *= 0x80\\n\\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\\n\\n  return val\\n}\\n\\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 1, this.length)\\n  if (!(this[offset] & 0x80)) return (this[offset])\\n  return ((0xff - this[offset] + 1) * -1)\\n}\\n\\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 2, this.length)\\n  const val = this[offset] | (this[offset + 1] << 8)\\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\\n}\\n\\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 2, this.length)\\n  const val = this[offset + 1] | (this[offset] << 8)\\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\\n}\\n\\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n\\n  return (this[offset]) |\\n    (this[offset + 1] << 8) |\\n    (this[offset + 2] << 16) |\\n    (this[offset + 3] << 24)\\n}\\n\\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n\\n  return (this[offset] << 24) |\\n    (this[offset + 1] << 16) |\\n    (this[offset + 2] << 8) |\\n    (this[offset + 3])\\n}\\n\\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\\n  offset = offset >>> 0\\n  validateNumber(offset, 'offset')\\n  const first = this[offset]\\n  const last = this[offset + 7]\\n  if (first === undefined || last === undefined) {\\n    boundsError(offset, this.length - 8)\\n  }\\n\\n  const val = this[offset + 4] +\\n    this[offset + 5] * 2 ** 8 +\\n    this[offset + 6] * 2 ** 16 +\\n    (last << 24) // Overflow\\n\\n  return (BigInt(val) << BigInt(32)) +\\n    BigInt(first +\\n    this[++offset] * 2 ** 8 +\\n    this[++offset] * 2 ** 16 +\\n    this[++offset] * 2 ** 24)\\n})\\n\\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\\n  offset = offset >>> 0\\n  validateNumber(offset, 'offset')\\n  const first = this[offset]\\n  const last = this[offset + 7]\\n  if (first === undefined || last === undefined) {\\n    boundsError(offset, this.length - 8)\\n  }\\n\\n  const val = (first << 24) + // Overflow\\n    this[++offset] * 2 ** 16 +\\n    this[++offset] * 2 ** 8 +\\n    this[++offset]\\n\\n  return (BigInt(val) << BigInt(32)) +\\n    BigInt(this[++offset] * 2 ** 24 +\\n    this[++offset] * 2 ** 16 +\\n    this[++offset] * 2 ** 8 +\\n    last)\\n})\\n\\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n  return ieee754.read(this, offset, true, 23, 4)\\n}\\n\\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 4, this.length)\\n  return ieee754.read(this, offset, false, 23, 4)\\n}\\n\\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 8, this.length)\\n  return ieee754.read(this, offset, true, 52, 8)\\n}\\n\\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\\n  offset = offset >>> 0\\n  if (!noAssert) checkOffset(offset, 8, this.length)\\n  return ieee754.read(this, offset, false, 52, 8)\\n}\\n\\nfunction checkInt (buf, value, offset, ext, max, min) {\\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\\\"buffer\\\" argument must be a Buffer instance')\\n  if (value > max || value < min) throw new RangeError('\\\"value\\\" argument is out of bounds')\\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\\n}\\n\\nBuffer.prototype.writeUintLE =\\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) {\\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\\n  }\\n\\n  let mul = 1\\n  let i = 0\\n  this[offset] = value & 0xFF\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    this[offset + i] = (value / mul) & 0xFF\\n  }\\n\\n  return offset + byteLength\\n}\\n\\nBuffer.prototype.writeUintBE =\\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  byteLength = byteLength >>> 0\\n  if (!noAssert) {\\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\\n  }\\n\\n  let i = byteLength - 1\\n  let mul = 1\\n  this[offset + i] = value & 0xFF\\n  while (--i >= 0 && (mul *= 0x100)) {\\n    this[offset + i] = (value / mul) & 0xFF\\n  }\\n\\n  return offset + byteLength\\n}\\n\\nBuffer.prototype.writeUint8 =\\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\\n  this[offset] = (value & 0xff)\\n  return offset + 1\\n}\\n\\nBuffer.prototype.writeUint16LE =\\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\\n  this[offset] = (value & 0xff)\\n  this[offset + 1] = (value >>> 8)\\n  return offset + 2\\n}\\n\\nBuffer.prototype.writeUint16BE =\\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\\n  this[offset] = (value >>> 8)\\n  this[offset + 1] = (value & 0xff)\\n  return offset + 2\\n}\\n\\nBuffer.prototype.writeUint32LE =\\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\\n  this[offset + 3] = (value >>> 24)\\n  this[offset + 2] = (value >>> 16)\\n  this[offset + 1] = (value >>> 8)\\n  this[offset] = (value & 0xff)\\n  return offset + 4\\n}\\n\\nBuffer.prototype.writeUint32BE =\\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\\n  this[offset] = (value >>> 24)\\n  this[offset + 1] = (value >>> 16)\\n  this[offset + 2] = (value >>> 8)\\n  this[offset + 3] = (value & 0xff)\\n  return offset + 4\\n}\\n\\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\\n  checkIntBI(value, min, max, buf, offset, 7)\\n\\n  let lo = Number(value & BigInt(0xffffffff))\\n  buf[offset++] = lo\\n  lo = lo >> 8\\n  buf[offset++] = lo\\n  lo = lo >> 8\\n  buf[offset++] = lo\\n  lo = lo >> 8\\n  buf[offset++] = lo\\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\\n  buf[offset++] = hi\\n  hi = hi >> 8\\n  buf[offset++] = hi\\n  hi = hi >> 8\\n  buf[offset++] = hi\\n  hi = hi >> 8\\n  buf[offset++] = hi\\n  return offset\\n}\\n\\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\\n  checkIntBI(value, min, max, buf, offset, 7)\\n\\n  let lo = Number(value & BigInt(0xffffffff))\\n  buf[offset + 7] = lo\\n  lo = lo >> 8\\n  buf[offset + 6] = lo\\n  lo = lo >> 8\\n  buf[offset + 5] = lo\\n  lo = lo >> 8\\n  buf[offset + 4] = lo\\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\\n  buf[offset + 3] = hi\\n  hi = hi >> 8\\n  buf[offset + 2] = hi\\n  hi = hi >> 8\\n  buf[offset + 1] = hi\\n  hi = hi >> 8\\n  buf[offset] = hi\\n  return offset + 8\\n}\\n\\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\\n})\\n\\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\\n})\\n\\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) {\\n    const limit = Math.pow(2, (8 * byteLength) - 1)\\n\\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\\n  }\\n\\n  let i = 0\\n  let mul = 1\\n  let sub = 0\\n  this[offset] = value & 0xFF\\n  while (++i < byteLength && (mul *= 0x100)) {\\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\\n      sub = 1\\n    }\\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\\n  }\\n\\n  return offset + byteLength\\n}\\n\\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) {\\n    const limit = Math.pow(2, (8 * byteLength) - 1)\\n\\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\\n  }\\n\\n  let i = byteLength - 1\\n  let mul = 1\\n  let sub = 0\\n  this[offset + i] = value & 0xFF\\n  while (--i >= 0 && (mul *= 0x100)) {\\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\\n      sub = 1\\n    }\\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\\n  }\\n\\n  return offset + byteLength\\n}\\n\\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\\n  if (value < 0) value = 0xff + value + 1\\n  this[offset] = (value & 0xff)\\n  return offset + 1\\n}\\n\\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\\n  this[offset] = (value & 0xff)\\n  this[offset + 1] = (value >>> 8)\\n  return offset + 2\\n}\\n\\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\\n  this[offset] = (value >>> 8)\\n  this[offset + 1] = (value & 0xff)\\n  return offset + 2\\n}\\n\\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\\n  this[offset] = (value & 0xff)\\n  this[offset + 1] = (value >>> 8)\\n  this[offset + 2] = (value >>> 16)\\n  this[offset + 3] = (value >>> 24)\\n  return offset + 4\\n}\\n\\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\\n  if (value < 0) value = 0xffffffff + value + 1\\n  this[offset] = (value >>> 24)\\n  this[offset + 1] = (value >>> 16)\\n  this[offset + 2] = (value >>> 8)\\n  this[offset + 3] = (value & 0xff)\\n  return offset + 4\\n}\\n\\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\\n})\\n\\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\\n})\\n\\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\\n  if (offset < 0) throw new RangeError('Index out of range')\\n}\\n\\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) {\\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\\n  }\\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\\n  return offset + 4\\n}\\n\\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\\n  return writeFloat(this, value, offset, true, noAssert)\\n}\\n\\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\\n  return writeFloat(this, value, offset, false, noAssert)\\n}\\n\\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\\n  value = +value\\n  offset = offset >>> 0\\n  if (!noAssert) {\\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\\n  }\\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\\n  return offset + 8\\n}\\n\\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\\n  return writeDouble(this, value, offset, true, noAssert)\\n}\\n\\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\\n  return writeDouble(this, value, offset, false, noAssert)\\n}\\n\\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\\n  if (!start) start = 0\\n  if (!end && end !== 0) end = this.length\\n  if (targetStart >= target.length) targetStart = target.length\\n  if (!targetStart) targetStart = 0\\n  if (end > 0 && end < start) end = start\\n\\n  // Copy 0 bytes; we're done\\n  if (end === start) return 0\\n  if (target.length === 0 || this.length === 0) return 0\\n\\n  // Fatal error conditions\\n  if (targetStart < 0) {\\n    throw new RangeError('targetStart out of bounds')\\n  }\\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\\n\\n  // Are we oob?\\n  if (end > this.length) end = this.length\\n  if (target.length - targetStart < end - start) {\\n    end = target.length - targetStart + start\\n  }\\n\\n  const len = end - start\\n\\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\\n    // Use built-in when available, missing from IE11\\n    this.copyWithin(targetStart, start, end)\\n  } else {\\n    Uint8Array.prototype.set.call(\\n      target,\\n      this.subarray(start, end),\\n      targetStart\\n    )\\n  }\\n\\n  return len\\n}\\n\\n// Usage:\\n//    buffer.fill(number[, offset[, end]])\\n//    buffer.fill(buffer[, offset[, end]])\\n//    buffer.fill(string[, offset[, end]][, encoding])\\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\\n  // Handle string cases:\\n  if (typeof val === 'string') {\\n    if (typeof start === 'string') {\\n      encoding = start\\n      start = 0\\n      end = this.length\\n    } else if (typeof end === 'string') {\\n      encoding = end\\n      end = this.length\\n    }\\n    if (encoding !== undefined && typeof encoding !== 'string') {\\n      throw new TypeError('encoding must be a string')\\n    }\\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\\n      throw new TypeError('Unknown encoding: ' + encoding)\\n    }\\n    if (val.length === 1) {\\n      const code = val.charCodeAt(0)\\n      if ((encoding === 'utf8' && code < 128) ||\\n          encoding === 'latin1') {\\n        // Fast path: If `val` fits into a single byte, use that numeric value.\\n        val = code\\n      }\\n    }\\n  } else if (typeof val === 'number') {\\n    val = val & 255\\n  } else if (typeof val === 'boolean') {\\n    val = Number(val)\\n  }\\n\\n  // Invalid ranges are not set to a default, so can range check early.\\n  if (start < 0 || this.length < start || this.length < end) {\\n    throw new RangeError('Out of range index')\\n  }\\n\\n  if (end <= start) {\\n    return this\\n  }\\n\\n  start = start >>> 0\\n  end = end === undefined ? this.length : end >>> 0\\n\\n  if (!val) val = 0\\n\\n  let i\\n  if (typeof val === 'number') {\\n    for (i = start; i < end; ++i) {\\n      this[i] = val\\n    }\\n  } else {\\n    const bytes = Buffer.isBuffer(val)\\n      ? val\\n      : Buffer.from(val, encoding)\\n    const len = bytes.length\\n    if (len === 0) {\\n      throw new TypeError('The value \\\"' + val +\\n        '\\\" is invalid for argument \\\"value\\\"')\\n    }\\n    for (i = 0; i < end - start; ++i) {\\n      this[i + start] = bytes[i % len]\\n    }\\n  }\\n\\n  return this\\n}\\n\\n// CUSTOM ERRORS\\n// =============\\n\\n// Simplified versions from Node, changed for Buffer-only usage\\nconst errors = {}\\nfunction E (sym, getMessage, Base) {\\n  errors[sym] = class NodeError extends Base {\\n    constructor () {\\n      super()\\n\\n      Object.defineProperty(this, 'message', {\\n        value: getMessage.apply(this, arguments),\\n        writable: true,\\n        configurable: true\\n      })\\n\\n      // Add the error code to the name to include it in the stack trace.\\n      this.name = `${this.name} [${sym}]`\\n      // Access the stack to generate the error message including the error code\\n      // from the name.\\n      this.stack // eslint-disable-line no-unused-expressions\\n      // Reset the name to the actual name.\\n      delete this.name\\n    }\\n\\n    get code () {\\n      return sym\\n    }\\n\\n    set code (value) {\\n      Object.defineProperty(this, 'code', {\\n        configurable: true,\\n        enumerable: true,\\n        value,\\n        writable: true\\n      })\\n    }\\n\\n    toString () {\\n      return `${this.name} [${sym}]: ${this.message}`\\n    }\\n  }\\n}\\n\\nE('ERR_BUFFER_OUT_OF_BOUNDS',\\n  function (name) {\\n    if (name) {\\n      return `${name} is outside of buffer bounds`\\n    }\\n\\n    return 'Attempt to access memory outside buffer bounds'\\n  }, RangeError)\\nE('ERR_INVALID_ARG_TYPE',\\n  function (name, actual) {\\n    return `The \\\"${name}\\\" argument must be of type number. Received type ${typeof actual}`\\n  }, TypeError)\\nE('ERR_OUT_OF_RANGE',\\n  function (str, range, input) {\\n    let msg = `The value of \\\"${str}\\\" is out of range.`\\n    let received = input\\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\\n      received = addNumericalSeparator(String(input))\\n    } else if (typeof input === 'bigint') {\\n      received = String(input)\\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\\n        received = addNumericalSeparator(received)\\n      }\\n      received += 'n'\\n    }\\n    msg += ` It must be ${range}. Received ${received}`\\n    return msg\\n  }, RangeError)\\n\\nfunction addNumericalSeparator (val) {\\n  let res = ''\\n  let i = val.length\\n  const start = val[0] === '-' ? 1 : 0\\n  for (; i >= start + 4; i -= 3) {\\n    res = `_${val.slice(i - 3, i)}${res}`\\n  }\\n  return `${val.slice(0, i)}${res}`\\n}\\n\\n// CHECK FUNCTIONS\\n// ===============\\n\\nfunction checkBounds (buf, offset, byteLength) {\\n  validateNumber(offset, 'offset')\\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\\n    boundsError(offset, buf.length - (byteLength + 1))\\n  }\\n}\\n\\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\\n  if (value > max || value < min) {\\n    const n = typeof min === 'bigint' ? 'n' : ''\\n    let range\\n    if (byteLength > 3) {\\n      if (min === 0 || min === BigInt(0)) {\\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\\n      } else {\\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\\n                `${(byteLength + 1) * 8 - 1}${n}`\\n      }\\n    } else {\\n      range = `>= ${min}${n} and <= ${max}${n}`\\n    }\\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\\n  }\\n  checkBounds(buf, offset, byteLength)\\n}\\n\\nfunction validateNumber (value, name) {\\n  if (typeof value !== 'number') {\\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\\n  }\\n}\\n\\nfunction boundsError (value, length, type) {\\n  if (Math.floor(value) !== value) {\\n    validateNumber(value, type)\\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\\n  }\\n\\n  if (length < 0) {\\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\\n  }\\n\\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\\n                                    value)\\n}\\n\\n// HELPER FUNCTIONS\\n// ================\\n\\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\\n\\nfunction base64clean (str) {\\n  // Node takes equal signs as end of the Base64 encoding\\n  str = str.split('=')[0]\\n  // Node strips out invalid characters like \\\\n and \\\\t from the string, base64-js does not\\n  str = str.trim().replace(INVALID_BASE64_RE, '')\\n  // Node converts strings with length < 2 to ''\\n  if (str.length < 2) return ''\\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\\n  while (str.length % 4 !== 0) {\\n    str = str + '='\\n  }\\n  return str\\n}\\n\\nfunction utf8ToBytes (string, units) {\\n  units = units || Infinity\\n  let codePoint\\n  const length = string.length\\n  let leadSurrogate = null\\n  const bytes = []\\n\\n  for (let i = 0; i < length; ++i) {\\n    codePoint = string.charCodeAt(i)\\n\\n    // is surrogate component\\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\\n      // last char was a lead\\n      if (!leadSurrogate) {\\n        // no lead yet\\n        if (codePoint > 0xDBFF) {\\n          // unexpected trail\\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\\n          continue\\n        } else if (i + 1 === length) {\\n          // unpaired lead\\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\\n          continue\\n        }\\n\\n        // valid lead\\n        leadSurrogate = codePoint\\n\\n        continue\\n      }\\n\\n      // 2 leads in a row\\n      if (codePoint < 0xDC00) {\\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\\n        leadSurrogate = codePoint\\n        continue\\n      }\\n\\n      // valid surrogate pair\\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\\n    } else if (leadSurrogate) {\\n      // valid bmp char, but last char was a lead\\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\\n    }\\n\\n    leadSurrogate = null\\n\\n    // encode utf8\\n    if (codePoint < 0x80) {\\n      if ((units -= 1) < 0) break\\n      bytes.push(codePoint)\\n    } else if (codePoint < 0x800) {\\n      if ((units -= 2) < 0) break\\n      bytes.push(\\n        codePoint >> 0x6 | 0xC0,\\n        codePoint & 0x3F | 0x80\\n      )\\n    } else if (codePoint < 0x10000) {\\n      if ((units -= 3) < 0) break\\n      bytes.push(\\n        codePoint >> 0xC | 0xE0,\\n        codePoint >> 0x6 & 0x3F | 0x80,\\n        codePoint & 0x3F | 0x80\\n      )\\n    } else if (codePoint < 0x110000) {\\n      if ((units -= 4) < 0) break\\n      bytes.push(\\n        codePoint >> 0x12 | 0xF0,\\n        codePoint >> 0xC & 0x3F | 0x80,\\n        codePoint >> 0x6 & 0x3F | 0x80,\\n        codePoint & 0x3F | 0x80\\n      )\\n    } else {\\n      throw new Error('Invalid code point')\\n    }\\n  }\\n\\n  return bytes\\n}\\n\\nfunction asciiToBytes (str) {\\n  const byteArray = []\\n  for (let i = 0; i < str.length; ++i) {\\n    // Node's code seems to be doing this and not & 0x7F..\\n    byteArray.push(str.charCodeAt(i) & 0xFF)\\n  }\\n  return byteArray\\n}\\n\\nfunction utf16leToBytes (str, units) {\\n  let c, hi, lo\\n  const byteArray = []\\n  for (let i = 0; i < str.length; ++i) {\\n    if ((units -= 2) < 0) break\\n\\n    c = str.charCodeAt(i)\\n    hi = c >> 8\\n    lo = c % 256\\n    byteArray.push(lo)\\n    byteArray.push(hi)\\n  }\\n\\n  return byteArray\\n}\\n\\nfunction base64ToBytes (str) {\\n  return base64.toByteArray(base64clean(str))\\n}\\n\\nfunction blitBuffer (src, dst, offset, length) {\\n  let i\\n  for (i = 0; i < length; ++i) {\\n    if ((i + offset >= dst.length) || (i >= src.length)) break\\n    dst[i + offset] = src[i]\\n  }\\n  return i\\n}\\n\\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\\n// the `instanceof` check but they should be treated as of that type.\\n// See: https://github.com/feross/buffer/issues/166\\nfunction isInstance (obj, type) {\\n  return obj instanceof type ||\\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\\n      obj.constructor.name === type.name)\\n}\\nfunction numberIsNaN (obj) {\\n  // For IE11 support\\n  return obj !== obj // eslint-disable-line no-self-compare\\n}\\n\\n// Create lookup table for `toString('hex')`\\n// See: https://github.com/feross/buffer/issues/219\\nconst hexSliceLookupTable = (function () {\\n  const alphabet = '0123456789abcdef'\\n  const table = new Array(256)\\n  for (let i = 0; i < 16; ++i) {\\n    const i16 = i * 16\\n    for (let j = 0; j < 16; ++j) {\\n      table[i16 + j] = alphabet[i] + alphabet[j]\\n    }\\n  }\\n  return table\\n})()\\n\\n// Return not function with Error if BigInt not supported\\nfunction defineBigIntMethod (fn) {\\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\\n}\\n\\nfunction BufferBigIntNotDefined () {\\n  throw new Error('BigInt not supported')\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"require\",\"module\",\"exports\",\"createBuffer\",\"length\",\"K_MAX_LENGTH\",\"RangeError\",\"buf\",\"Uint8Array\",\"Object\",\"setPrototypeOf\",\"Buffer\",\"prototype\",\"arg\",\"encodingOrOffset\",\"TypeError\",\"allocUnsafe\",\"from\",\"value\",\"encoding\",\"isEncoding\",\"byteLength\",\"actual\",\"write\",\"slice\",\"ArrayBuffer\",\"isView\",\"isInstance\",\"copy\",\"fromArrayBuffer\",\"buffer\",\"byteOffset\",\"fromArrayLike\",\"SharedArrayBuffer\",\"valueOf\",\"b\",\"fromObject\",\"Symbol\",\"toPrimitive\",\"assertSize\",\"size\",\"checked\",\"array\",\"i\",\"undefined\",\"obj\",\"isBuffer\",\"len\",\"type\",\"Array\",\"isArray\",\"data\",\"toString\",\"string\",\"mustMatch\",\"arguments\",\"loweredCase\",\"utf8ToBytes\",\"base64ToBytes\",\"toLowerCase\",\"slowToString\",\"start\",\"end\",\"out\",\"hexSliceLookupTable\",\"utf8Slice\",\"ret\",\"Math\",\"min\",\"String\",\"fromCharCode\",\"base64\",\"fromByteArray\",\"bytes\",\"res\",\"swap\",\"n\",\"m\",\"bidirectionalIndexOf\",\"val\",\"dir\",\"arrayIndexOf\",\"indexOf\",\"call\",\"lastIndexOf\",\"arr\",\"read\",\"indexSize\",\"readUInt16BE\",\"arrLength\",\"valLength\",\"foundIndex\",\"found\",\"j\",\"firstByte\",\"codePoint\",\"bytesPerSequence\",\"secondByte\",\"thirdByte\",\"fourthByte\",\"tempCodePoint\",\"push\",\"MAX_ARGUMENTS_LENGTH\",\"apply\",\"checkOffset\",\"offset\",\"ext\",\"checkInt\",\"max\",\"wrtBigUInt64LE\",\"checkIntBI\",\"lo\",\"Number\",\"BigInt\",\"hi\",\"wrtBigUInt64BE\",\"checkIEEE754\",\"writeFloat\",\"littleEndian\",\"noAssert\",\"ieee754\",\"writeDouble\",\"E\",\"sym\",\"getMessage\",\"Base\",\"errors\",\"constructor\",\"defineProperty\",\"writable\",\"configurable\",\"name\",\"stack\",\"enumerable\",\"message\",\"addNumericalSeparator\",\"ERR_OUT_OF_RANGE\",\"range\",\"validateNumber\",\"boundsError\",\"ERR_INVALID_ARG_TYPE\",\"floor\",\"ERR_BUFFER_OUT_OF_BOUNDS\",\"units\",\"Infinity\",\"leadSurrogate\",\"charCodeAt\",\"Error\",\"str\",\"toByteArray\",\"split\",\"trim\",\"replace\",\"INVALID_BASE64_RE\",\"blitBuffer\",\"src\",\"dst\",\"defineBigIntMethod\",\"fn\",\"BufferBigIntNotDefined\",\"customInspectSymbol\",\"SlowBuffer\",\"alloc\",\"INSPECT_MAX_BYTES\",\"kMaxLength\",\"TYPED_ARRAY_SUPPORT\",\"typedArraySupport\",\"proto\",\"foo\",\"e\",\"console\",\"error\",\"get\",\"poolSize\",\"Buffer.from\",\"Buffer.alloc\",\"fill\",\"Buffer.allocUnsafe\",\"allocUnsafeSlow\",\"Buffer.allocUnsafeSlow\",\"Buffer.isBuffer\",\"_isBuffer\",\"compare\",\"Buffer.compare\",\"a\",\"x\",\"y\",\"Buffer.isEncoding\",\"concat\",\"Buffer.concat\",\"list\",\"pos\",\"set\",\"swap16\",\"Buffer.prototype.swap16\",\"swap32\",\"Buffer.prototype.swap32\",\"swap64\",\"Buffer.prototype.swap64\",\"Buffer.prototype.toString\",\"toLocaleString\",\"equals\",\"Buffer.prototype.equals\",\"inspect\",\"Buffer.prototype.inspect\",\"Buffer.prototype.compare\",\"target\",\"thisStart\",\"thisEnd\",\"thisCopy\",\"targetCopy\",\"includes\",\"Buffer.prototype.includes\",\"Buffer.prototype.indexOf\",\"Buffer.prototype.lastIndexOf\",\"Buffer.prototype.write\",\"isFinite\",\"remaining\",\"strLen\",\"parsed\",\"parseInt\",\"substr\",\"byteArray\",\"c\",\"toJSON\",\"Buffer.prototype.toJSON\",\"_arr\",\"Buffer.prototype.slice\",\"newBuf\",\"subarray\",\"readUintLE\",\"readUIntLE\",\"Buffer.prototype.readUIntLE\",\"mul\",\"readUintBE\",\"readUIntBE\",\"Buffer.prototype.readUIntBE\",\"readUint8\",\"readUInt8\",\"Buffer.prototype.readUInt8\",\"readUint16LE\",\"readUInt16LE\",\"Buffer.prototype.readUInt16LE\",\"readUint16BE\",\"Buffer.prototype.readUInt16BE\",\"readUint32LE\",\"readUInt32LE\",\"Buffer.prototype.readUInt32LE\",\"readUint32BE\",\"readUInt32BE\",\"Buffer.prototype.readUInt32BE\",\"readBigUInt64LE\",\"first\",\"last\",\"readBigUInt64BE\",\"readIntLE\",\"Buffer.prototype.readIntLE\",\"pow\",\"readIntBE\",\"Buffer.prototype.readIntBE\",\"readInt8\",\"Buffer.prototype.readInt8\",\"readInt16LE\",\"Buffer.prototype.readInt16LE\",\"readInt16BE\",\"Buffer.prototype.readInt16BE\",\"readInt32LE\",\"Buffer.prototype.readInt32LE\",\"readInt32BE\",\"Buffer.prototype.readInt32BE\",\"readBigInt64LE\",\"readBigInt64BE\",\"readFloatLE\",\"Buffer.prototype.readFloatLE\",\"readFloatBE\",\"Buffer.prototype.readFloatBE\",\"readDoubleLE\",\"Buffer.prototype.readDoubleLE\",\"readDoubleBE\",\"Buffer.prototype.readDoubleBE\",\"writeUintLE\",\"writeUIntLE\",\"Buffer.prototype.writeUIntLE\",\"writeUintBE\",\"writeUIntBE\",\"Buffer.prototype.writeUIntBE\",\"writeUint8\",\"writeUInt8\",\"Buffer.prototype.writeUInt8\",\"writeUint16LE\",\"writeUInt16LE\",\"Buffer.prototype.writeUInt16LE\",\"writeUint16BE\",\"writeUInt16BE\",\"Buffer.prototype.writeUInt16BE\",\"writeUint32LE\",\"writeUInt32LE\",\"Buffer.prototype.writeUInt32LE\",\"writeUint32BE\",\"writeUInt32BE\",\"Buffer.prototype.writeUInt32BE\",\"writeBigUInt64LE\",\"writeBigUInt64BE\",\"writeIntLE\",\"Buffer.prototype.writeIntLE\",\"limit\",\"sub\",\"writeIntBE\",\"Buffer.prototype.writeIntBE\",\"writeInt8\",\"Buffer.prototype.writeInt8\",\"writeInt16LE\",\"Buffer.prototype.writeInt16LE\",\"writeInt16BE\",\"Buffer.prototype.writeInt16BE\",\"writeInt32LE\",\"Buffer.prototype.writeInt32LE\",\"writeInt32BE\",\"Buffer.prototype.writeInt32BE\",\"writeBigInt64LE\",\"writeBigInt64BE\",\"writeFloatLE\",\"Buffer.prototype.writeFloatLE\",\"writeFloatBE\",\"Buffer.prototype.writeFloatBE\",\"writeDoubleLE\",\"Buffer.prototype.writeDoubleLE\",\"writeDoubleBE\",\"Buffer.prototype.writeDoubleBE\",\"Buffer.prototype.copy\",\"targetStart\",\"copyWithin\",\"Buffer.prototype.fill\",\"code\",\"input\",\"msg\",\"received\",\"isInteger\",\"abs\",\"table\",\"i16\",\"alphabet\"]\n}\n"]